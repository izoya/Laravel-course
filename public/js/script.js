/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "./resources/js/template/form-handler.js":
/*!***********************************************!*\
  !*** ./resources/js/template/form-handler.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("$(\"#userForm\").validator().on(\"submit\", function (event) {\n  if (event.isDefaultPrevented()) {\n    // handle the invalid form...\n    formError();\n    submitMSG(false, \"Did you fill in the form properly?\");\n  } else {\n    // everything looks good!\n    event.preventDefault();\n    submitForm(event.target);\n  }\n});\n\nfunction submitForm(form) {\n  // Initiate Variables With Form Content\n  var formData = $(form).serialize();\n  $.ajax({\n    type: \"POST\",\n    url: form.action,\n    data: formData,\n    success: function success(response) {\n      if (response === \"success\") {\n        formSuccess();\n      } else {\n        formError();\n        submitMSG(false, 'Error');\n      }\n    },\n    error: function error(xhr) {\n      var msg = xhr.responseJSON.message;\n      var errors = xhr.responseJSON.errors;\n\n      for (var inputName in errors) {\n        if (errors.hasOwnProperty(inputName)) {\n          form[inputName].insertAdjacentHTML('afterend', '<small class=\"form-text text-danger\">' + errors[inputName] + '</small>');\n        }\n      }\n\n      formError();\n      submitMSG(false, msg);\n    }\n  });\n}\n\nfunction formSuccess() {\n  $(\"#userForm\")[0].reset();\n  $(\"#userForm\").find(\"small\").detach();\n  submitMSG(true, \"Message Submitted!\");\n}\n\nfunction formError() {\n  $(\"#userForm\").removeClass().addClass('shake animated').one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {\n    $(this).removeClass();\n  });\n}\n\nfunction submitMSG(valid, msg) {\n  var msgClasses = \"text-center\";\n\n  if (valid) {\n    msgClasses += \" tada animated text-success\";\n  } else {\n    msgClasses += \" text-danger\";\n  }\n\n  $(\"#msgSubmit\").removeClass().addClass(msgClasses).text(msg);\n}\n\nfunction getConfirm() {\n  return confirm(\"Do you really want to delete this?\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvdGVtcGxhdGUvZm9ybS1oYW5kbGVyLmpzP2M4NmIiXSwibmFtZXMiOlsiJCIsInZhbGlkYXRvciIsIm9uIiwiZXZlbnQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJmb3JtRXJyb3IiLCJzdWJtaXRNU0ciLCJwcmV2ZW50RGVmYXVsdCIsInN1Ym1pdEZvcm0iLCJ0YXJnZXQiLCJmb3JtIiwiZm9ybURhdGEiLCJzZXJpYWxpemUiLCJhamF4IiwidHlwZSIsInVybCIsImFjdGlvbiIsImRhdGEiLCJzdWNjZXNzIiwicmVzcG9uc2UiLCJmb3JtU3VjY2VzcyIsImVycm9yIiwieGhyIiwibXNnIiwicmVzcG9uc2VKU09OIiwibWVzc2FnZSIsImVycm9ycyIsImlucHV0TmFtZSIsImhhc093blByb3BlcnR5IiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwicmVzZXQiLCJmaW5kIiwiZGV0YWNoIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsIm9uZSIsInZhbGlkIiwibXNnQ2xhc3NlcyIsInRleHQiLCJnZXRDb25maXJtIiwiY29uZmlybSJdLCJtYXBwaW5ncyI6IkFBQUFBLENBQUMsQ0FBQyxXQUFELENBQUQsQ0FBZUMsU0FBZixHQUEyQkMsRUFBM0IsQ0FBOEIsUUFBOUIsRUFBd0MsVUFBVUMsS0FBVixFQUFpQjtBQUNyRCxNQUFJQSxLQUFLLENBQUNDLGtCQUFOLEVBQUosRUFBZ0M7QUFDNUI7QUFDQUMsYUFBUztBQUNUQyxhQUFTLENBQUMsS0FBRCxFQUFRLG9DQUFSLENBQVQ7QUFDSCxHQUpELE1BSU87QUFDSDtBQUNBSCxTQUFLLENBQUNJLGNBQU47QUFDQUMsY0FBVSxDQUFDTCxLQUFLLENBQUNNLE1BQVAsQ0FBVjtBQUNIO0FBQ0osQ0FWRDs7QUFZQSxTQUFTRCxVQUFULENBQW9CRSxJQUFwQixFQUEwQjtBQUN0QjtBQUNBLE1BQUlDLFFBQVEsR0FBR1gsQ0FBQyxDQUFDVSxJQUFELENBQUQsQ0FBUUUsU0FBUixFQUFmO0FBRUFaLEdBQUMsQ0FBQ2EsSUFBRixDQUFPO0FBQ0hDLFFBQUksRUFBRSxNQURIO0FBRUhDLE9BQUcsRUFBRUwsSUFBSSxDQUFDTSxNQUZQO0FBR0hDLFFBQUksRUFBRU4sUUFISDtBQUlITyxXQUFPLEVBQUUsaUJBQVVDLFFBQVYsRUFBb0I7QUFDekIsVUFBSUEsUUFBUSxLQUFLLFNBQWpCLEVBQTRCO0FBQ3hCQyxtQkFBVztBQUNkLE9BRkQsTUFFTztBQUNIZixpQkFBUztBQUNUQyxpQkFBUyxDQUFDLEtBQUQsRUFBUSxPQUFSLENBQVQ7QUFDSDtBQUNKLEtBWEU7QUFZSGUsU0FBSyxFQUFFLGVBQVVDLEdBQVYsRUFBZTtBQUNsQixVQUFJQyxHQUFHLEdBQUdELEdBQUcsQ0FBQ0UsWUFBSixDQUFpQkMsT0FBM0I7QUFDQSxVQUFJQyxNQUFNLEdBQUdKLEdBQUcsQ0FBQ0UsWUFBSixDQUFpQkUsTUFBOUI7O0FBRUEsV0FBSyxJQUFJQyxTQUFULElBQXNCRCxNQUF0QixFQUE4QjtBQUMxQixZQUFJQSxNQUFNLENBQUNFLGNBQVAsQ0FBc0JELFNBQXRCLENBQUosRUFBc0M7QUFDbENqQixjQUFJLENBQUNpQixTQUFELENBQUosQ0FBZ0JFLGtCQUFoQixDQUNJLFVBREosRUFFSSwwQ0FBMENILE1BQU0sQ0FBQ0MsU0FBRCxDQUFoRCxHQUE4RCxVQUZsRTtBQUlIO0FBQ0o7O0FBQ0R0QixlQUFTO0FBQ1RDLGVBQVMsQ0FBQyxLQUFELEVBQVFpQixHQUFSLENBQVQ7QUFDSDtBQTFCRSxHQUFQO0FBNEJIOztBQUVELFNBQVNILFdBQVQsR0FBdUI7QUFDbkJwQixHQUFDLENBQUMsV0FBRCxDQUFELENBQWUsQ0FBZixFQUFrQjhCLEtBQWxCO0FBQ0E5QixHQUFDLENBQUMsV0FBRCxDQUFELENBQWUrQixJQUFmLENBQW9CLE9BQXBCLEVBQTZCQyxNQUE3QjtBQUNBMUIsV0FBUyxDQUFDLElBQUQsRUFBTyxvQkFBUCxDQUFUO0FBQ0g7O0FBRUQsU0FBU0QsU0FBVCxHQUFxQjtBQUNqQkwsR0FBQyxDQUFDLFdBQUQsQ0FBRCxDQUFlaUMsV0FBZixHQUE2QkMsUUFBN0IsQ0FBc0MsZ0JBQXRDLEVBQ0tDLEdBREwsQ0FDUyw4RUFEVCxFQUN5RixZQUFZO0FBQzdGbkMsS0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRaUMsV0FBUjtBQUNILEdBSEw7QUFJSDs7QUFFRCxTQUFTM0IsU0FBVCxDQUFtQjhCLEtBQW5CLEVBQTBCYixHQUExQixFQUErQjtBQUMzQixNQUFJYyxVQUFVLEdBQUcsYUFBakI7O0FBQ0EsTUFBSUQsS0FBSixFQUFXO0FBQ1BDLGNBQVUsSUFBSSw2QkFBZDtBQUNILEdBRkQsTUFFTztBQUNIQSxjQUFVLElBQUksY0FBZDtBQUNIOztBQUNEckMsR0FBQyxDQUFDLFlBQUQsQ0FBRCxDQUFnQmlDLFdBQWhCLEdBQThCQyxRQUE5QixDQUF1Q0csVUFBdkMsRUFBbURDLElBQW5ELENBQXdEZixHQUF4RDtBQUNIOztBQUVELFNBQVNnQixVQUFULEdBQXNCO0FBQ2xCLFNBQU9DLE9BQU8sQ0FBQyxvQ0FBRCxDQUFkO0FBQ0giLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvdGVtcGxhdGUvZm9ybS1oYW5kbGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJChcIiN1c2VyRm9ybVwiKS52YWxpZGF0b3IoKS5vbihcInN1Ym1pdFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgLy8gaGFuZGxlIHRoZSBpbnZhbGlkIGZvcm0uLi5cbiAgICAgICAgZm9ybUVycm9yKCk7XG4gICAgICAgIHN1Ym1pdE1TRyhmYWxzZSwgXCJEaWQgeW91IGZpbGwgaW4gdGhlIGZvcm0gcHJvcGVybHk/XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGV2ZXJ5dGhpbmcgbG9va3MgZ29vZCFcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgc3VibWl0Rm9ybShldmVudC50YXJnZXQpO1xuICAgIH1cbn0pO1xuXG5mdW5jdGlvbiBzdWJtaXRGb3JtKGZvcm0pIHtcbiAgICAvLyBJbml0aWF0ZSBWYXJpYWJsZXMgV2l0aCBGb3JtIENvbnRlbnRcbiAgICBsZXQgZm9ybURhdGEgPSAkKGZvcm0pLnNlcmlhbGl6ZSgpO1xuXG4gICAgJC5hamF4KHtcbiAgICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICAgIHVybDogZm9ybS5hY3Rpb24sXG4gICAgICAgIGRhdGE6IGZvcm1EYXRhLFxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZSA9PT0gXCJzdWNjZXNzXCIpIHtcbiAgICAgICAgICAgICAgICBmb3JtU3VjY2VzcygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3JtRXJyb3IoKTtcbiAgICAgICAgICAgICAgICBzdWJtaXRNU0coZmFsc2UsICdFcnJvcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhocikge1xuICAgICAgICAgICAgbGV0IG1zZyA9IHhoci5yZXNwb25zZUpTT04ubWVzc2FnZTtcbiAgICAgICAgICAgIGxldCBlcnJvcnMgPSB4aHIucmVzcG9uc2VKU09OLmVycm9ycztcblxuICAgICAgICAgICAgZm9yIChsZXQgaW5wdXROYW1lIGluIGVycm9ycykge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcnMuaGFzT3duUHJvcGVydHkoaW5wdXROYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3JtW2lucHV0TmFtZV0uaW5zZXJ0QWRqYWNlbnRIVE1MKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2FmdGVyZW5kJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c21hbGwgY2xhc3M9XCJmb3JtLXRleHQgdGV4dC1kYW5nZXJcIj4nICsgZXJyb3JzW2lucHV0TmFtZV0gKyAnPC9zbWFsbD4nXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9ybUVycm9yKCk7XG4gICAgICAgICAgICBzdWJtaXRNU0coZmFsc2UsIG1zZyk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZm9ybVN1Y2Nlc3MoKSB7XG4gICAgJChcIiN1c2VyRm9ybVwiKVswXS5yZXNldCgpO1xuICAgICQoXCIjdXNlckZvcm1cIikuZmluZChcInNtYWxsXCIpLmRldGFjaCgpO1xuICAgIHN1Ym1pdE1TRyh0cnVlLCBcIk1lc3NhZ2UgU3VibWl0dGVkIVwiKVxufVxuXG5mdW5jdGlvbiBmb3JtRXJyb3IoKSB7XG4gICAgJChcIiN1c2VyRm9ybVwiKS5yZW1vdmVDbGFzcygpLmFkZENsYXNzKCdzaGFrZSBhbmltYXRlZCcpXG4gICAgICAgIC5vbmUoJ3dlYmtpdEFuaW1hdGlvbkVuZCBtb3pBbmltYXRpb25FbmQgTVNBbmltYXRpb25FbmQgb2FuaW1hdGlvbmVuZCBhbmltYXRpb25lbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCk7XG4gICAgICAgIH0pO1xufVxuXG5mdW5jdGlvbiBzdWJtaXRNU0codmFsaWQsIG1zZykge1xuICAgIGxldCBtc2dDbGFzc2VzID0gXCJ0ZXh0LWNlbnRlclwiO1xuICAgIGlmICh2YWxpZCkge1xuICAgICAgICBtc2dDbGFzc2VzICs9IFwiIHRhZGEgYW5pbWF0ZWQgdGV4dC1zdWNjZXNzXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbXNnQ2xhc3NlcyArPSBcIiB0ZXh0LWRhbmdlclwiO1xuICAgIH1cbiAgICAkKFwiI21zZ1N1Ym1pdFwiKS5yZW1vdmVDbGFzcygpLmFkZENsYXNzKG1zZ0NsYXNzZXMpLnRleHQobXNnKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29uZmlybSgpIHtcbiAgICByZXR1cm4gY29uZmlybShcIkRvIHlvdSByZWFsbHkgd2FudCB0byBkZWxldGUgdGhpcz9cIik7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/template/form-handler.js\n");

/***/ }),

/***/ "./resources/js/template/form-validator.min.js":
/*!*****************************************************!*\
  !*** ./resources/js/template/form-validator.min.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * Validator v0.8.1 for Bootstrap 3, by @1000hz\n * Copyright 2015 Cina Saffary\n * Licensed under http://opensource.org/licenses/MIT\n *\n * https://github.com/1000hz/bootstrap-validator\n */\n+function (a) {\n  \"use strict\";\n\n  function b(b) {\n    return this.each(function () {\n      var c = a(this),\n          e = a.extend({}, d.DEFAULTS, c.data(), \"object\" == _typeof(b) && b),\n          f = c.data(\"bs.validator\");\n      (f || \"destroy\" != b) && (f || c.data(\"bs.validator\", f = new d(this, e)), \"string\" == typeof b && f[b]());\n    });\n  }\n\n  var c = ':input:not([type=\"submit\"], button):enabled:visible',\n      d = function d(b, c) {\n    this.$element = a(b), this.options = c, c.errors = a.extend({}, d.DEFAULTS.errors, c.errors);\n\n    for (var e in c.custom) {\n      if (!c.errors[e]) throw new Error(\"Missing default error message for custom validator: \" + e);\n    }\n\n    a.extend(d.VALIDATORS, c.custom), this.$element.attr(\"novalidate\", !0), this.toggleSubmit(), this.$element.on(\"input.bs.validator change.bs.validator focusout.bs.validator\", a.proxy(this.validateInput, this)), this.$element.on(\"submit.bs.validator\", a.proxy(this.onSubmit, this)), this.$element.find(\"[data-match]\").each(function () {\n      var b = a(this),\n          c = b.data(\"match\");\n      a(c).on(\"input.bs.validator\", function () {\n        b.val() && b.trigger(\"input.bs.validator\");\n      });\n    });\n  };\n\n  d.DEFAULTS = {\n    delay: 500,\n    html: !1,\n    disable: !0,\n    custom: {},\n    errors: {\n      match: \"Does not match\",\n      minlength: \"Not long enough\"\n    },\n    feedback: {\n      success: \"glyphicon-ok\",\n      error: \"glyphicon-warning-sign\"\n    }\n  }, d.VALIDATORS = {\n    \"native\": function native(a) {\n      var b = a[0];\n      return b.checkValidity ? b.checkValidity() : !0;\n    },\n    match: function match(b) {\n      var c = b.data(\"match\");\n      return !b.val() || b.val() === a(c).val();\n    },\n    minlength: function minlength(a) {\n      var b = a.data(\"minlength\");\n      return !a.val() || a.val().length >= b;\n    }\n  }, d.prototype.validateInput = function (b) {\n    var c = a(b.target),\n        d = c.data(\"bs.validator.errors\");\n\n    if (c.is('[type=\"radio\"]') && (c = this.$element.find('input[name=\"' + c.attr(\"name\") + '\"]')), this.$element.trigger(b = a.Event(\"validate.bs.validator\", {\n      relatedTarget: c[0]\n    })), !b.isDefaultPrevented()) {\n      var e = this;\n      this.runValidators(c).done(function (f) {\n        c.data(\"bs.validator.errors\", f), f.length ? e.showErrors(c) : e.clearErrors(c), d && f.toString() === d.toString() || (b = f.length ? a.Event(\"invalid.bs.validator\", {\n          relatedTarget: c[0],\n          detail: f\n        }) : a.Event(\"valid.bs.validator\", {\n          relatedTarget: c[0],\n          detail: d\n        }), e.$element.trigger(b)), e.toggleSubmit(), e.$element.trigger(a.Event(\"validated.bs.validator\", {\n          relatedTarget: c[0]\n        }));\n      });\n    }\n  }, d.prototype.runValidators = function (b) {\n    function c(a) {\n      return b.data(a + \"-error\") || b.data(\"error\") || \"native\" == a && b[0].validationMessage || g.errors[a];\n    }\n\n    var e = [],\n        f = a.Deferred(),\n        g = this.options;\n    return b.data(\"bs.validator.deferred\") && b.data(\"bs.validator.deferred\").reject(), b.data(\"bs.validator.deferred\", f), a.each(d.VALIDATORS, a.proxy(function (a, d) {\n      if ((b.data(a) || \"native\" == a) && !d.call(this, b)) {\n        var f = c(a);\n        !~e.indexOf(f) && e.push(f);\n      }\n    }, this)), !e.length && b.val() && b.data(\"remote\") ? this.defer(b, function () {\n      var d = {};\n      d[b.attr(\"name\")] = b.val(), a.get(b.data(\"remote\"), d).fail(function (a, b, d) {\n        e.push(c(\"remote\") || d);\n      }).always(function () {\n        f.resolve(e);\n      });\n    }) : f.resolve(e), f.promise();\n  }, d.prototype.validate = function () {\n    var a = this.options.delay;\n    return this.options.delay = 0, this.$element.find(c).trigger(\"input.bs.validator\"), this.options.delay = a, this;\n  }, d.prototype.showErrors = function (b) {\n    var c = this.options.html ? \"html\" : \"text\";\n    this.defer(b, function () {\n      var d = b.closest(\".form-group\"),\n          e = d.find(\".help-block.with-errors\"),\n          f = d.find(\".form-control-feedback\"),\n          g = b.data(\"bs.validator.errors\");\n      g.length && (g = a(\"<ul/>\").addClass(\"list-unstyled\").append(a.map(g, function (b) {\n        return a(\"<li/>\")[c](b);\n      })), void 0 === e.data(\"bs.validator.originalContent\") && e.data(\"bs.validator.originalContent\", e.html()), e.empty().append(g), d.addClass(\"has-error\"), f.length && f.removeClass(this.options.feedback.success) && f.addClass(this.options.feedback.error) && d.removeClass(\"has-success\"));\n    });\n  }, d.prototype.clearErrors = function (a) {\n    var b = a.closest(\".form-group\"),\n        c = b.find(\".help-block.with-errors\"),\n        d = b.find(\".form-control-feedback\");\n    c.html(c.data(\"bs.validator.originalContent\")), b.removeClass(\"has-error\"), d.length && d.removeClass(this.options.feedback.error) && d.addClass(this.options.feedback.success) && b.addClass(\"has-success\");\n  }, d.prototype.hasErrors = function () {\n    function b() {\n      return !!(a(this).data(\"bs.validator.errors\") || []).length;\n    }\n\n    return !!this.$element.find(c).filter(b).length;\n  }, d.prototype.isIncomplete = function () {\n    function b() {\n      return \"checkbox\" === this.type ? !this.checked : \"radio\" === this.type ? !a('[name=\"' + this.name + '\"]:checked').length : \"\" === a.trim(this.value);\n    }\n\n    return !!this.$element.find(c).filter(\"[required]\").filter(b).length;\n  }, d.prototype.onSubmit = function (a) {\n    this.validate(), (this.isIncomplete() || this.hasErrors()) && a.preventDefault();\n  }, d.prototype.toggleSubmit = function () {\n    if (this.options.disable) {\n      var b = a('button[type=\"submit\"], input[type=\"submit\"]').filter('[form=\"' + this.$element.attr(\"id\") + '\"]').add(this.$element.find('input[type=\"submit\"], button[type=\"submit\"]'));\n      b.toggleClass(\"disabled\", this.isIncomplete() || this.hasErrors()).css({\n        \"pointer-events\": \"all\",\n        cursor: \"pointer\"\n      });\n    }\n  }, d.prototype.defer = function (b, c) {\n    return c = a.proxy(c, this), this.options.delay ? (window.clearTimeout(b.data(\"bs.validator.timeout\")), void b.data(\"bs.validator.timeout\", window.setTimeout(c, this.options.delay))) : c();\n  }, d.prototype.destroy = function () {\n    return this.$element.removeAttr(\"novalidate\").removeData(\"bs.validator\").off(\".bs.validator\"), this.$element.find(c).off(\".bs.validator\").removeData([\"bs.validator.errors\", \"bs.validator.deferred\"]).each(function () {\n      var b = a(this),\n          c = b.data(\"bs.validator.timeout\");\n      window.clearTimeout(c) && b.removeData(\"bs.validator.timeout\");\n    }), this.$element.find(\".help-block.with-errors\").each(function () {\n      var b = a(this),\n          c = b.data(\"bs.validator.originalContent\");\n      b.removeData(\"bs.validator.originalContent\").html(c);\n    }), this.$element.find('input[type=\"submit\"], button[type=\"submit\"]').removeClass(\"disabled\"), this.$element.find(\".has-error\").removeClass(\"has-error\"), this;\n  };\n  var e = a.fn.validator;\n  a.fn.validator = b, a.fn.validator.Constructor = d, a.fn.validator.noConflict = function () {\n    return a.fn.validator = e, this;\n  }, a(window).on(\"load\", function () {\n    a('form[data-toggle=\"validator\"]').each(function () {\n      var c = a(this);\n      b.call(c, c.data());\n    });\n  });\n}(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/template/form-validator.min.js\n");

/***/ }),

/***/ "./resources/js/template/jquery-min.js":
/*!*********************************************!*\
  !*** ./resources/js/template/jquery-min.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*! jQuery v2.1.4 | (c) 2005, 2015 jQuery Foundation, Inc. | jquery.org/license */\n!function (a, b) {\n  \"object\" == ( false ? undefined : _typeof(module)) && \"object\" == _typeof(module.exports) ? module.exports = a.document ? b(a, !0) : function (a) {\n    if (!a.document) throw new Error(\"jQuery requires a window with a document\");\n    return b(a);\n  } : b(a);\n}(\"undefined\" != typeof window ? window : this, function (a, b) {\n  var c = [],\n      d = c.slice,\n      e = c.concat,\n      f = c.push,\n      g = c.indexOf,\n      h = {},\n      i = h.toString,\n      j = h.hasOwnProperty,\n      k = {},\n      l = a.document,\n      m = \"2.1.4\",\n      n = function n(a, b) {\n    return new n.fn.init(a, b);\n  },\n      o = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n      p = /^-ms-/,\n      q = /-([\\da-z])/gi,\n      r = function r(a, b) {\n    return b.toUpperCase();\n  };\n\n  n.fn = n.prototype = {\n    jquery: m,\n    constructor: n,\n    selector: \"\",\n    length: 0,\n    toArray: function toArray() {\n      return d.call(this);\n    },\n    get: function get(a) {\n      return null != a ? 0 > a ? this[a + this.length] : this[a] : d.call(this);\n    },\n    pushStack: function pushStack(a) {\n      var b = n.merge(this.constructor(), a);\n      return b.prevObject = this, b.context = this.context, b;\n    },\n    each: function each(a, b) {\n      return n.each(this, a, b);\n    },\n    map: function map(a) {\n      return this.pushStack(n.map(this, function (b, c) {\n        return a.call(b, c, b);\n      }));\n    },\n    slice: function slice() {\n      return this.pushStack(d.apply(this, arguments));\n    },\n    first: function first() {\n      return this.eq(0);\n    },\n    last: function last() {\n      return this.eq(-1);\n    },\n    eq: function eq(a) {\n      var b = this.length,\n          c = +a + (0 > a ? b : 0);\n      return this.pushStack(c >= 0 && b > c ? [this[c]] : []);\n    },\n    end: function end() {\n      return this.prevObject || this.constructor(null);\n    },\n    push: f,\n    sort: c.sort,\n    splice: c.splice\n  }, n.extend = n.fn.extend = function () {\n    var a,\n        b,\n        c,\n        d,\n        e,\n        f,\n        g = arguments[0] || {},\n        h = 1,\n        i = arguments.length,\n        j = !1;\n\n    for (\"boolean\" == typeof g && (j = g, g = arguments[h] || {}, h++), \"object\" == _typeof(g) || n.isFunction(g) || (g = {}), h === i && (g = this, h--); i > h; h++) {\n      if (null != (a = arguments[h])) for (b in a) {\n        c = g[b], d = a[b], g !== d && (j && d && (n.isPlainObject(d) || (e = n.isArray(d))) ? (e ? (e = !1, f = c && n.isArray(c) ? c : []) : f = c && n.isPlainObject(c) ? c : {}, g[b] = n.extend(j, f, d)) : void 0 !== d && (g[b] = d));\n      }\n    }\n\n    return g;\n  }, n.extend({\n    expando: \"jQuery\" + (m + Math.random()).replace(/\\D/g, \"\"),\n    isReady: !0,\n    error: function error(a) {\n      throw new Error(a);\n    },\n    noop: function noop() {},\n    isFunction: function isFunction(a) {\n      return \"function\" === n.type(a);\n    },\n    isArray: Array.isArray,\n    isWindow: function isWindow(a) {\n      return null != a && a === a.window;\n    },\n    isNumeric: function isNumeric(a) {\n      return !n.isArray(a) && a - parseFloat(a) + 1 >= 0;\n    },\n    isPlainObject: function isPlainObject(a) {\n      return \"object\" !== n.type(a) || a.nodeType || n.isWindow(a) ? !1 : a.constructor && !j.call(a.constructor.prototype, \"isPrototypeOf\") ? !1 : !0;\n    },\n    isEmptyObject: function isEmptyObject(a) {\n      var b;\n\n      for (b in a) {\n        return !1;\n      }\n\n      return !0;\n    },\n    type: function type(a) {\n      return null == a ? a + \"\" : \"object\" == _typeof(a) || \"function\" == typeof a ? h[i.call(a)] || \"object\" : _typeof(a);\n    },\n    globalEval: function globalEval(a) {\n      var b,\n          c = eval;\n      a = n.trim(a), a && (1 === a.indexOf(\"use strict\") ? (b = l.createElement(\"script\"), b.text = a, l.head.appendChild(b).parentNode.removeChild(b)) : c(a));\n    },\n    camelCase: function camelCase(a) {\n      return a.replace(p, \"ms-\").replace(q, r);\n    },\n    nodeName: function nodeName(a, b) {\n      return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();\n    },\n    each: function each(a, b, c) {\n      var d,\n          e = 0,\n          f = a.length,\n          g = s(a);\n\n      if (c) {\n        if (g) {\n          for (; f > e; e++) {\n            if (d = b.apply(a[e], c), d === !1) break;\n          }\n        } else for (e in a) {\n          if (d = b.apply(a[e], c), d === !1) break;\n        }\n      } else if (g) {\n        for (; f > e; e++) {\n          if (d = b.call(a[e], e, a[e]), d === !1) break;\n        }\n      } else for (e in a) {\n        if (d = b.call(a[e], e, a[e]), d === !1) break;\n      }\n\n      return a;\n    },\n    trim: function trim(a) {\n      return null == a ? \"\" : (a + \"\").replace(o, \"\");\n    },\n    makeArray: function makeArray(a, b) {\n      var c = b || [];\n      return null != a && (s(Object(a)) ? n.merge(c, \"string\" == typeof a ? [a] : a) : f.call(c, a)), c;\n    },\n    inArray: function inArray(a, b, c) {\n      return null == b ? -1 : g.call(b, a, c);\n    },\n    merge: function merge(a, b) {\n      for (var c = +b.length, d = 0, e = a.length; c > d; d++) {\n        a[e++] = b[d];\n      }\n\n      return a.length = e, a;\n    },\n    grep: function grep(a, b, c) {\n      for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++) {\n        d = !b(a[f], f), d !== h && e.push(a[f]);\n      }\n\n      return e;\n    },\n    map: function map(a, b, c) {\n      var d,\n          f = 0,\n          g = a.length,\n          h = s(a),\n          i = [];\n      if (h) for (; g > f; f++) {\n        d = b(a[f], f, c), null != d && i.push(d);\n      } else for (f in a) {\n        d = b(a[f], f, c), null != d && i.push(d);\n      }\n      return e.apply([], i);\n    },\n    guid: 1,\n    proxy: function proxy(a, b) {\n      var c, e, f;\n      return \"string\" == typeof b && (c = a[b], b = a, a = c), n.isFunction(a) ? (e = d.call(arguments, 2), f = function f() {\n        return a.apply(b || this, e.concat(d.call(arguments)));\n      }, f.guid = a.guid = a.guid || n.guid++, f) : void 0;\n    },\n    now: Date.now,\n    support: k\n  }), n.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function (a, b) {\n    h[\"[object \" + b + \"]\"] = b.toLowerCase();\n  });\n\n  function s(a) {\n    var b = \"length\" in a && a.length,\n        c = n.type(a);\n    return \"function\" === c || n.isWindow(a) ? !1 : 1 === a.nodeType && b ? !0 : \"array\" === c || 0 === b || \"number\" == typeof b && b > 0 && b - 1 in a;\n  }\n\n  var t = function (a) {\n    var b,\n        c,\n        d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        j,\n        k,\n        l,\n        m,\n        n,\n        o,\n        p,\n        q,\n        r,\n        s,\n        t,\n        u = \"sizzle\" + 1 * new Date(),\n        v = a.document,\n        w = 0,\n        x = 0,\n        y = ha(),\n        z = ha(),\n        A = ha(),\n        B = function B(a, b) {\n      return a === b && (l = !0), 0;\n    },\n        C = 1 << 31,\n        D = {}.hasOwnProperty,\n        E = [],\n        F = E.pop,\n        G = E.push,\n        H = E.push,\n        I = E.slice,\n        J = function J(a, b) {\n      for (var c = 0, d = a.length; d > c; c++) {\n        if (a[c] === b) return c;\n      }\n\n      return -1;\n    },\n        K = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n        L = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n        M = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",\n        N = M.replace(\"w\", \"w#\"),\n        O = \"\\\\[\" + L + \"*(\" + M + \")(?:\" + L + \"*([*^$|!~]?=)\" + L + \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + N + \"))|)\" + L + \"*\\\\]\",\n        P = \":(\" + M + \")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + O + \")*)|.*)\\\\)|)\",\n        Q = new RegExp(L + \"+\", \"g\"),\n        R = new RegExp(\"^\" + L + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + L + \"+$\", \"g\"),\n        S = new RegExp(\"^\" + L + \"*,\" + L + \"*\"),\n        T = new RegExp(\"^\" + L + \"*([>+~]|\" + L + \")\" + L + \"*\"),\n        U = new RegExp(\"=\" + L + \"*([^\\\\]'\\\"]*?)\" + L + \"*\\\\]\", \"g\"),\n        V = new RegExp(P),\n        W = new RegExp(\"^\" + N + \"$\"),\n        X = {\n      ID: new RegExp(\"^#(\" + M + \")\"),\n      CLASS: new RegExp(\"^\\\\.(\" + M + \")\"),\n      TAG: new RegExp(\"^(\" + M.replace(\"w\", \"w*\") + \")\"),\n      ATTR: new RegExp(\"^\" + O),\n      PSEUDO: new RegExp(\"^\" + P),\n      CHILD: new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + L + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + L + \"*(?:([+-]|)\" + L + \"*(\\\\d+)|))\" + L + \"*\\\\)|)\", \"i\"),\n      bool: new RegExp(\"^(?:\" + K + \")$\", \"i\"),\n      needsContext: new RegExp(\"^\" + L + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + L + \"*((?:-\\\\d)?\\\\d*)\" + L + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n    },\n        Y = /^(?:input|select|textarea|button)$/i,\n        Z = /^h\\d$/i,\n        $ = /^[^{]+\\{\\s*\\[native \\w/,\n        _ = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n        aa = /[+~]/,\n        ba = /'|\\\\/g,\n        ca = new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\" + L + \"?|(\" + L + \")|.)\", \"ig\"),\n        da = function da(a, b, c) {\n      var d = \"0x\" + b - 65536;\n      return d !== d || c ? b : 0 > d ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);\n    },\n        ea = function ea() {\n      m();\n    };\n\n    try {\n      H.apply(E = I.call(v.childNodes), v.childNodes), E[v.childNodes.length].nodeType;\n    } catch (fa) {\n      H = {\n        apply: E.length ? function (a, b) {\n          G.apply(a, I.call(b));\n        } : function (a, b) {\n          var c = a.length,\n              d = 0;\n\n          while (a[c++] = b[d++]) {\n            ;\n          }\n\n          a.length = c - 1;\n        }\n      };\n    }\n\n    function ga(a, b, d, e) {\n      var f, h, j, k, l, o, r, s, w, x;\n      if ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, d = d || [], k = b.nodeType, \"string\" != typeof a || !a || 1 !== k && 9 !== k && 11 !== k) return d;\n\n      if (!e && p) {\n        if (11 !== k && (f = _.exec(a))) if (j = f[1]) {\n          if (9 === k) {\n            if (h = b.getElementById(j), !h || !h.parentNode) return d;\n            if (h.id === j) return d.push(h), d;\n          } else if (b.ownerDocument && (h = b.ownerDocument.getElementById(j)) && t(b, h) && h.id === j) return d.push(h), d;\n        } else {\n          if (f[2]) return H.apply(d, b.getElementsByTagName(a)), d;\n          if ((j = f[3]) && c.getElementsByClassName) return H.apply(d, b.getElementsByClassName(j)), d;\n        }\n\n        if (c.qsa && (!q || !q.test(a))) {\n          if (s = r = u, w = b, x = 1 !== k && a, 1 === k && \"object\" !== b.nodeName.toLowerCase()) {\n            o = g(a), (r = b.getAttribute(\"id\")) ? s = r.replace(ba, \"\\\\$&\") : b.setAttribute(\"id\", s), s = \"[id='\" + s + \"'] \", l = o.length;\n\n            while (l--) {\n              o[l] = s + ra(o[l]);\n            }\n\n            w = aa.test(a) && pa(b.parentNode) || b, x = o.join(\",\");\n          }\n\n          if (x) try {\n            return H.apply(d, w.querySelectorAll(x)), d;\n          } catch (y) {} finally {\n            r || b.removeAttribute(\"id\");\n          }\n        }\n      }\n\n      return i(a.replace(R, \"$1\"), b, d, e);\n    }\n\n    function ha() {\n      var a = [];\n\n      function b(c, e) {\n        return a.push(c + \" \") > d.cacheLength && delete b[a.shift()], b[c + \" \"] = e;\n      }\n\n      return b;\n    }\n\n    function ia(a) {\n      return a[u] = !0, a;\n    }\n\n    function ja(a) {\n      var b = n.createElement(\"div\");\n\n      try {\n        return !!a(b);\n      } catch (c) {\n        return !1;\n      } finally {\n        b.parentNode && b.parentNode.removeChild(b), b = null;\n      }\n    }\n\n    function ka(a, b) {\n      var c = a.split(\"|\"),\n          e = a.length;\n\n      while (e--) {\n        d.attrHandle[c[e]] = b;\n      }\n    }\n\n    function la(a, b) {\n      var c = b && a,\n          d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || C) - (~a.sourceIndex || C);\n      if (d) return d;\n      if (c) while (c = c.nextSibling) {\n        if (c === b) return -1;\n      }\n      return a ? 1 : -1;\n    }\n\n    function ma(a) {\n      return function (b) {\n        var c = b.nodeName.toLowerCase();\n        return \"input\" === c && b.type === a;\n      };\n    }\n\n    function na(a) {\n      return function (b) {\n        var c = b.nodeName.toLowerCase();\n        return (\"input\" === c || \"button\" === c) && b.type === a;\n      };\n    }\n\n    function oa(a) {\n      return ia(function (b) {\n        return b = +b, ia(function (c, d) {\n          var e,\n              f = a([], c.length, b),\n              g = f.length;\n\n          while (g--) {\n            c[e = f[g]] && (c[e] = !(d[e] = c[e]));\n          }\n        });\n      });\n    }\n\n    function pa(a) {\n      return a && \"undefined\" != typeof a.getElementsByTagName && a;\n    }\n\n    c = ga.support = {}, f = ga.isXML = function (a) {\n      var b = a && (a.ownerDocument || a).documentElement;\n      return b ? \"HTML\" !== b.nodeName : !1;\n    }, m = ga.setDocument = function (a) {\n      var b,\n          e,\n          g = a ? a.ownerDocument || a : v;\n      return g !== n && 9 === g.nodeType && g.documentElement ? (n = g, o = g.documentElement, e = g.defaultView, e && e !== e.top && (e.addEventListener ? e.addEventListener(\"unload\", ea, !1) : e.attachEvent && e.attachEvent(\"onunload\", ea)), p = !f(g), c.attributes = ja(function (a) {\n        return a.className = \"i\", !a.getAttribute(\"className\");\n      }), c.getElementsByTagName = ja(function (a) {\n        return a.appendChild(g.createComment(\"\")), !a.getElementsByTagName(\"*\").length;\n      }), c.getElementsByClassName = $.test(g.getElementsByClassName), c.getById = ja(function (a) {\n        return o.appendChild(a).id = u, !g.getElementsByName || !g.getElementsByName(u).length;\n      }), c.getById ? (d.find.ID = function (a, b) {\n        if (\"undefined\" != typeof b.getElementById && p) {\n          var c = b.getElementById(a);\n          return c && c.parentNode ? [c] : [];\n        }\n      }, d.filter.ID = function (a) {\n        var b = a.replace(ca, da);\n        return function (a) {\n          return a.getAttribute(\"id\") === b;\n        };\n      }) : (delete d.find.ID, d.filter.ID = function (a) {\n        var b = a.replace(ca, da);\n        return function (a) {\n          var c = \"undefined\" != typeof a.getAttributeNode && a.getAttributeNode(\"id\");\n          return c && c.value === b;\n        };\n      }), d.find.TAG = c.getElementsByTagName ? function (a, b) {\n        return \"undefined\" != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : c.qsa ? b.querySelectorAll(a) : void 0;\n      } : function (a, b) {\n        var c,\n            d = [],\n            e = 0,\n            f = b.getElementsByTagName(a);\n\n        if (\"*\" === a) {\n          while (c = f[e++]) {\n            1 === c.nodeType && d.push(c);\n          }\n\n          return d;\n        }\n\n        return f;\n      }, d.find.CLASS = c.getElementsByClassName && function (a, b) {\n        return p ? b.getElementsByClassName(a) : void 0;\n      }, r = [], q = [], (c.qsa = $.test(g.querySelectorAll)) && (ja(function (a) {\n        o.appendChild(a).innerHTML = \"<a id='\" + u + \"'></a><select id='\" + u + \"-\\f]' msallowcapture=''><option selected=''></option></select>\", a.querySelectorAll(\"[msallowcapture^='']\").length && q.push(\"[*^$]=\" + L + \"*(?:''|\\\"\\\")\"), a.querySelectorAll(\"[selected]\").length || q.push(\"\\\\[\" + L + \"*(?:value|\" + K + \")\"), a.querySelectorAll(\"[id~=\" + u + \"-]\").length || q.push(\"~=\"), a.querySelectorAll(\":checked\").length || q.push(\":checked\"), a.querySelectorAll(\"a#\" + u + \"+*\").length || q.push(\".#.+[+~]\");\n      }), ja(function (a) {\n        var b = g.createElement(\"input\");\n        b.setAttribute(\"type\", \"hidden\"), a.appendChild(b).setAttribute(\"name\", \"D\"), a.querySelectorAll(\"[name=d]\").length && q.push(\"name\" + L + \"*[*^$|!~]?=\"), a.querySelectorAll(\":enabled\").length || q.push(\":enabled\", \":disabled\"), a.querySelectorAll(\"*,:x\"), q.push(\",.*:\");\n      })), (c.matchesSelector = $.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ja(function (a) {\n        c.disconnectedMatch = s.call(a, \"div\"), s.call(a, \"[s!='']:x\"), r.push(\"!=\", P);\n      }), q = q.length && new RegExp(q.join(\"|\")), r = r.length && new RegExp(r.join(\"|\")), b = $.test(o.compareDocumentPosition), t = b || $.test(o.contains) ? function (a, b) {\n        var c = 9 === a.nodeType ? a.documentElement : a,\n            d = b && b.parentNode;\n        return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));\n      } : function (a, b) {\n        if (b) while (b = b.parentNode) {\n          if (b === a) return !0;\n        }\n        return !1;\n      }, B = b ? function (a, b) {\n        if (a === b) return l = !0, 0;\n        var d = !a.compareDocumentPosition - !b.compareDocumentPosition;\n        return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === g || a.ownerDocument === v && t(v, a) ? -1 : b === g || b.ownerDocument === v && t(v, b) ? 1 : k ? J(k, a) - J(k, b) : 0 : 4 & d ? -1 : 1);\n      } : function (a, b) {\n        if (a === b) return l = !0, 0;\n        var c,\n            d = 0,\n            e = a.parentNode,\n            f = b.parentNode,\n            h = [a],\n            i = [b];\n        if (!e || !f) return a === g ? -1 : b === g ? 1 : e ? -1 : f ? 1 : k ? J(k, a) - J(k, b) : 0;\n        if (e === f) return la(a, b);\n        c = a;\n\n        while (c = c.parentNode) {\n          h.unshift(c);\n        }\n\n        c = b;\n\n        while (c = c.parentNode) {\n          i.unshift(c);\n        }\n\n        while (h[d] === i[d]) {\n          d++;\n        }\n\n        return d ? la(h[d], i[d]) : h[d] === v ? -1 : i[d] === v ? 1 : 0;\n      }, g) : n;\n    }, ga.matches = function (a, b) {\n      return ga(a, null, null, b);\n    }, ga.matchesSelector = function (a, b) {\n      if ((a.ownerDocument || a) !== n && m(a), b = b.replace(U, \"='$1']\"), !(!c.matchesSelector || !p || r && r.test(b) || q && q.test(b))) try {\n        var d = s.call(a, b);\n        if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;\n      } catch (e) {}\n      return ga(b, n, null, [a]).length > 0;\n    }, ga.contains = function (a, b) {\n      return (a.ownerDocument || a) !== n && m(a), t(a, b);\n    }, ga.attr = function (a, b) {\n      (a.ownerDocument || a) !== n && m(a);\n      var e = d.attrHandle[b.toLowerCase()],\n          f = e && D.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;\n      return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;\n    }, ga.error = function (a) {\n      throw new Error(\"Syntax error, unrecognized expression: \" + a);\n    }, ga.uniqueSort = function (a) {\n      var b,\n          d = [],\n          e = 0,\n          f = 0;\n\n      if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {\n        while (b = a[f++]) {\n          b === a[f] && (e = d.push(f));\n        }\n\n        while (e--) {\n          a.splice(d[e], 1);\n        }\n      }\n\n      return k = null, a;\n    }, e = ga.getText = function (a) {\n      var b,\n          c = \"\",\n          d = 0,\n          f = a.nodeType;\n\n      if (f) {\n        if (1 === f || 9 === f || 11 === f) {\n          if (\"string\" == typeof a.textContent) return a.textContent;\n\n          for (a = a.firstChild; a; a = a.nextSibling) {\n            c += e(a);\n          }\n        } else if (3 === f || 4 === f) return a.nodeValue;\n      } else while (b = a[d++]) {\n        c += e(b);\n      }\n\n      return c;\n    }, d = ga.selectors = {\n      cacheLength: 50,\n      createPseudo: ia,\n      match: X,\n      attrHandle: {},\n      find: {},\n      relative: {\n        \">\": {\n          dir: \"parentNode\",\n          first: !0\n        },\n        \" \": {\n          dir: \"parentNode\"\n        },\n        \"+\": {\n          dir: \"previousSibling\",\n          first: !0\n        },\n        \"~\": {\n          dir: \"previousSibling\"\n        }\n      },\n      preFilter: {\n        ATTR: function ATTR(a) {\n          return a[1] = a[1].replace(ca, da), a[3] = (a[3] || a[4] || a[5] || \"\").replace(ca, da), \"~=\" === a[2] && (a[3] = \" \" + a[3] + \" \"), a.slice(0, 4);\n        },\n        CHILD: function CHILD(a) {\n          return a[1] = a[1].toLowerCase(), \"nth\" === a[1].slice(0, 3) ? (a[3] || ga.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * (\"even\" === a[3] || \"odd\" === a[3])), a[5] = +(a[7] + a[8] || \"odd\" === a[3])) : a[3] && ga.error(a[0]), a;\n        },\n        PSEUDO: function PSEUDO(a) {\n          var b,\n              c = !a[6] && a[2];\n          return X.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || \"\" : c && V.test(c) && (b = g(c, !0)) && (b = c.indexOf(\")\", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3));\n        }\n      },\n      filter: {\n        TAG: function TAG(a) {\n          var b = a.replace(ca, da).toLowerCase();\n          return \"*\" === a ? function () {\n            return !0;\n          } : function (a) {\n            return a.nodeName && a.nodeName.toLowerCase() === b;\n          };\n        },\n        CLASS: function CLASS(a) {\n          var b = y[a + \" \"];\n          return b || (b = new RegExp(\"(^|\" + L + \")\" + a + \"(\" + L + \"|$)\")) && y(a, function (a) {\n            return b.test(\"string\" == typeof a.className && a.className || \"undefined\" != typeof a.getAttribute && a.getAttribute(\"class\") || \"\");\n          });\n        },\n        ATTR: function ATTR(a, b, c) {\n          return function (d) {\n            var e = ga.attr(d, a);\n            return null == e ? \"!=\" === b : b ? (e += \"\", \"=\" === b ? e === c : \"!=\" === b ? e !== c : \"^=\" === b ? c && 0 === e.indexOf(c) : \"*=\" === b ? c && e.indexOf(c) > -1 : \"$=\" === b ? c && e.slice(-c.length) === c : \"~=\" === b ? (\" \" + e.replace(Q, \" \") + \" \").indexOf(c) > -1 : \"|=\" === b ? e === c || e.slice(0, c.length + 1) === c + \"-\" : !1) : !0;\n          };\n        },\n        CHILD: function CHILD(a, b, c, d, e) {\n          var f = \"nth\" !== a.slice(0, 3),\n              g = \"last\" !== a.slice(-4),\n              h = \"of-type\" === b;\n          return 1 === d && 0 === e ? function (a) {\n            return !!a.parentNode;\n          } : function (b, c, i) {\n            var j,\n                k,\n                l,\n                m,\n                n,\n                o,\n                p = f !== g ? \"nextSibling\" : \"previousSibling\",\n                q = b.parentNode,\n                r = h && b.nodeName.toLowerCase(),\n                s = !i && !h;\n\n            if (q) {\n              if (f) {\n                while (p) {\n                  l = b;\n\n                  while (l = l[p]) {\n                    if (h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) return !1;\n                  }\n\n                  o = p = \"only\" === a && !o && \"nextSibling\";\n                }\n\n                return !0;\n              }\n\n              if (o = [g ? q.firstChild : q.lastChild], g && s) {\n                k = q[u] || (q[u] = {}), j = k[a] || [], n = j[0] === w && j[1], m = j[0] === w && j[2], l = n && q.childNodes[n];\n\n                while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) {\n                  if (1 === l.nodeType && ++m && l === b) {\n                    k[a] = [w, n, m];\n                    break;\n                  }\n                }\n              } else if (s && (j = (b[u] || (b[u] = {}))[a]) && j[0] === w) m = j[1];else while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) {\n                if ((h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) && ++m && (s && ((l[u] || (l[u] = {}))[a] = [w, m]), l === b)) break;\n              }\n\n              return m -= e, m === d || m % d === 0 && m / d >= 0;\n            }\n          };\n        },\n        PSEUDO: function PSEUDO(a, b) {\n          var c,\n              e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || ga.error(\"unsupported pseudo: \" + a);\n          return e[u] ? e(b) : e.length > 1 ? (c = [a, a, \"\", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? ia(function (a, c) {\n            var d,\n                f = e(a, b),\n                g = f.length;\n\n            while (g--) {\n              d = J(a, f[g]), a[d] = !(c[d] = f[g]);\n            }\n          }) : function (a) {\n            return e(a, 0, c);\n          }) : e;\n        }\n      },\n      pseudos: {\n        not: ia(function (a) {\n          var b = [],\n              c = [],\n              d = h(a.replace(R, \"$1\"));\n          return d[u] ? ia(function (a, b, c, e) {\n            var f,\n                g = d(a, null, e, []),\n                h = a.length;\n\n            while (h--) {\n              (f = g[h]) && (a[h] = !(b[h] = f));\n            }\n          }) : function (a, e, f) {\n            return b[0] = a, d(b, null, f, c), b[0] = null, !c.pop();\n          };\n        }),\n        has: ia(function (a) {\n          return function (b) {\n            return ga(a, b).length > 0;\n          };\n        }),\n        contains: ia(function (a) {\n          return a = a.replace(ca, da), function (b) {\n            return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;\n          };\n        }),\n        lang: ia(function (a) {\n          return W.test(a || \"\") || ga.error(\"unsupported lang: \" + a), a = a.replace(ca, da).toLowerCase(), function (b) {\n            var c;\n\n            do {\n              if (c = p ? b.lang : b.getAttribute(\"xml:lang\") || b.getAttribute(\"lang\")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + \"-\");\n            } while ((b = b.parentNode) && 1 === b.nodeType);\n\n            return !1;\n          };\n        }),\n        target: function target(b) {\n          var c = a.location && a.location.hash;\n          return c && c.slice(1) === b.id;\n        },\n        root: function root(a) {\n          return a === o;\n        },\n        focus: function focus(a) {\n          return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);\n        },\n        enabled: function enabled(a) {\n          return a.disabled === !1;\n        },\n        disabled: function disabled(a) {\n          return a.disabled === !0;\n        },\n        checked: function checked(a) {\n          var b = a.nodeName.toLowerCase();\n          return \"input\" === b && !!a.checked || \"option\" === b && !!a.selected;\n        },\n        selected: function selected(a) {\n          return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;\n        },\n        empty: function empty(a) {\n          for (a = a.firstChild; a; a = a.nextSibling) {\n            if (a.nodeType < 6) return !1;\n          }\n\n          return !0;\n        },\n        parent: function parent(a) {\n          return !d.pseudos.empty(a);\n        },\n        header: function header(a) {\n          return Z.test(a.nodeName);\n        },\n        input: function input(a) {\n          return Y.test(a.nodeName);\n        },\n        button: function button(a) {\n          var b = a.nodeName.toLowerCase();\n          return \"input\" === b && \"button\" === a.type || \"button\" === b;\n        },\n        text: function text(a) {\n          var b;\n          return \"input\" === a.nodeName.toLowerCase() && \"text\" === a.type && (null == (b = a.getAttribute(\"type\")) || \"text\" === b.toLowerCase());\n        },\n        first: oa(function () {\n          return [0];\n        }),\n        last: oa(function (a, b) {\n          return [b - 1];\n        }),\n        eq: oa(function (a, b, c) {\n          return [0 > c ? c + b : c];\n        }),\n        even: oa(function (a, b) {\n          for (var c = 0; b > c; c += 2) {\n            a.push(c);\n          }\n\n          return a;\n        }),\n        odd: oa(function (a, b) {\n          for (var c = 1; b > c; c += 2) {\n            a.push(c);\n          }\n\n          return a;\n        }),\n        lt: oa(function (a, b, c) {\n          for (var d = 0 > c ? c + b : c; --d >= 0;) {\n            a.push(d);\n          }\n\n          return a;\n        }),\n        gt: oa(function (a, b, c) {\n          for (var d = 0 > c ? c + b : c; ++d < b;) {\n            a.push(d);\n          }\n\n          return a;\n        })\n      }\n    }, d.pseudos.nth = d.pseudos.eq;\n\n    for (b in {\n      radio: !0,\n      checkbox: !0,\n      file: !0,\n      password: !0,\n      image: !0\n    }) {\n      d.pseudos[b] = ma(b);\n    }\n\n    for (b in {\n      submit: !0,\n      reset: !0\n    }) {\n      d.pseudos[b] = na(b);\n    }\n\n    function qa() {}\n\n    qa.prototype = d.filters = d.pseudos, d.setFilters = new qa(), g = ga.tokenize = function (a, b) {\n      var c,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k = z[a + \" \"];\n      if (k) return b ? 0 : k.slice(0);\n      h = a, i = [], j = d.preFilter;\n\n      while (h) {\n        (!c || (e = S.exec(h))) && (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = T.exec(h)) && (c = e.shift(), f.push({\n          value: c,\n          type: e[0].replace(R, \" \")\n        }), h = h.slice(c.length));\n\n        for (g in d.filter) {\n          !(e = X[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({\n            value: c,\n            type: g,\n            matches: e\n          }), h = h.slice(c.length));\n        }\n\n        if (!c) break;\n      }\n\n      return b ? h.length : h ? ga.error(a) : z(a, i).slice(0);\n    };\n\n    function ra(a) {\n      for (var b = 0, c = a.length, d = \"\"; c > b; b++) {\n        d += a[b].value;\n      }\n\n      return d;\n    }\n\n    function sa(a, b, c) {\n      var d = b.dir,\n          e = c && \"parentNode\" === d,\n          f = x++;\n      return b.first ? function (b, c, f) {\n        while (b = b[d]) {\n          if (1 === b.nodeType || e) return a(b, c, f);\n        }\n      } : function (b, c, g) {\n        var h,\n            i,\n            j = [w, f];\n\n        if (g) {\n          while (b = b[d]) {\n            if ((1 === b.nodeType || e) && a(b, c, g)) return !0;\n          }\n        } else while (b = b[d]) {\n          if (1 === b.nodeType || e) {\n            if (i = b[u] || (b[u] = {}), (h = i[d]) && h[0] === w && h[1] === f) return j[2] = h[2];\n            if (i[d] = j, j[2] = a(b, c, g)) return !0;\n          }\n        }\n      };\n    }\n\n    function ta(a) {\n      return a.length > 1 ? function (b, c, d) {\n        var e = a.length;\n\n        while (e--) {\n          if (!a[e](b, c, d)) return !1;\n        }\n\n        return !0;\n      } : a[0];\n    }\n\n    function ua(a, b, c) {\n      for (var d = 0, e = b.length; e > d; d++) {\n        ga(a, b[d], c);\n      }\n\n      return c;\n    }\n\n    function va(a, b, c, d, e) {\n      for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++) {\n        (f = a[h]) && (!c || c(f, d, e)) && (g.push(f), j && b.push(h));\n      }\n\n      return g;\n    }\n\n    function wa(a, b, c, d, e, f) {\n      return d && !d[u] && (d = wa(d)), e && !e[u] && (e = wa(e, f)), ia(function (f, g, h, i) {\n        var j,\n            k,\n            l,\n            m = [],\n            n = [],\n            o = g.length,\n            p = f || ua(b || \"*\", h.nodeType ? [h] : h, []),\n            q = !a || !f && b ? p : va(p, m, a, h, i),\n            r = c ? e || (f ? a : o || d) ? [] : g : q;\n\n        if (c && c(q, r, h, i), d) {\n          j = va(r, n), d(j, [], h, i), k = j.length;\n\n          while (k--) {\n            (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));\n          }\n        }\n\n        if (f) {\n          if (e || a) {\n            if (e) {\n              j = [], k = r.length;\n\n              while (k--) {\n                (l = r[k]) && j.push(q[k] = l);\n              }\n\n              e(null, r = [], j, i);\n            }\n\n            k = r.length;\n\n            while (k--) {\n              (l = r[k]) && (j = e ? J(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));\n            }\n          }\n        } else r = va(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : H.apply(g, r);\n      });\n    }\n\n    function xa(a) {\n      for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[\" \"], i = g ? 1 : 0, k = sa(function (a) {\n        return a === b;\n      }, h, !0), l = sa(function (a) {\n        return J(b, a) > -1;\n      }, h, !0), m = [function (a, c, d) {\n        var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));\n        return b = null, e;\n      }]; f > i; i++) {\n        if (c = d.relative[a[i].type]) m = [sa(ta(m), c)];else {\n          if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {\n            for (e = ++i; f > e; e++) {\n              if (d.relative[a[e].type]) break;\n            }\n\n            return wa(i > 1 && ta(m), i > 1 && ra(a.slice(0, i - 1).concat({\n              value: \" \" === a[i - 2].type ? \"*\" : \"\"\n            })).replace(R, \"$1\"), c, e > i && xa(a.slice(i, e)), f > e && xa(a = a.slice(e)), f > e && ra(a));\n          }\n\n          m.push(c);\n        }\n      }\n\n      return ta(m);\n    }\n\n    function ya(a, b) {\n      var c = b.length > 0,\n          e = a.length > 0,\n          f = function f(_f, g, h, i, k) {\n        var l,\n            m,\n            o,\n            p = 0,\n            q = \"0\",\n            r = _f && [],\n            s = [],\n            t = j,\n            u = _f || e && d.find.TAG(\"*\", k),\n            v = w += null == t ? 1 : Math.random() || .1,\n            x = u.length;\n\n        for (k && (j = g !== n && g); q !== x && null != (l = u[q]); q++) {\n          if (e && l) {\n            m = 0;\n\n            while (o = a[m++]) {\n              if (o(l, g, h)) {\n                i.push(l);\n                break;\n              }\n            }\n\n            k && (w = v);\n          }\n\n          c && ((l = !o && l) && p--, _f && r.push(l));\n        }\n\n        if (p += q, c && q !== p) {\n          m = 0;\n\n          while (o = b[m++]) {\n            o(r, s, g, h);\n          }\n\n          if (_f) {\n            if (p > 0) while (q--) {\n              r[q] || s[q] || (s[q] = F.call(i));\n            }\n            s = va(s);\n          }\n\n          H.apply(i, s), k && !_f && s.length > 0 && p + b.length > 1 && ga.uniqueSort(i);\n        }\n\n        return k && (w = v, j = t), r;\n      };\n\n      return c ? ia(f) : f;\n    }\n\n    return h = ga.compile = function (a, b) {\n      var c,\n          d = [],\n          e = [],\n          f = A[a + \" \"];\n\n      if (!f) {\n        b || (b = g(a)), c = b.length;\n\n        while (c--) {\n          f = xa(b[c]), f[u] ? d.push(f) : e.push(f);\n        }\n\n        f = A(a, ya(e, d)), f.selector = a;\n      }\n\n      return f;\n    }, i = ga.select = function (a, b, e, f) {\n      var i,\n          j,\n          k,\n          l,\n          m,\n          n = \"function\" == typeof a && a,\n          o = !f && g(a = n.selector || a);\n\n      if (e = e || [], 1 === o.length) {\n        if (j = o[0] = o[0].slice(0), j.length > 2 && \"ID\" === (k = j[0]).type && c.getById && 9 === b.nodeType && p && d.relative[j[1].type]) {\n          if (b = (d.find.ID(k.matches[0].replace(ca, da), b) || [])[0], !b) return e;\n          n && (b = b.parentNode), a = a.slice(j.shift().value.length);\n        }\n\n        i = X.needsContext.test(a) ? 0 : j.length;\n\n        while (i--) {\n          if (k = j[i], d.relative[l = k.type]) break;\n\n          if ((m = d.find[l]) && (f = m(k.matches[0].replace(ca, da), aa.test(j[0].type) && pa(b.parentNode) || b))) {\n            if (j.splice(i, 1), a = f.length && ra(j), !a) return H.apply(e, f), e;\n            break;\n          }\n        }\n      }\n\n      return (n || h(a, o))(f, b, !p, e, aa.test(a) && pa(b.parentNode) || b), e;\n    }, c.sortStable = u.split(\"\").sort(B).join(\"\") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ja(function (a) {\n      return 1 & a.compareDocumentPosition(n.createElement(\"div\"));\n    }), ja(function (a) {\n      return a.innerHTML = \"<a href='#'></a>\", \"#\" === a.firstChild.getAttribute(\"href\");\n    }) || ka(\"type|href|height|width\", function (a, b, c) {\n      return c ? void 0 : a.getAttribute(b, \"type\" === b.toLowerCase() ? 1 : 2);\n    }), c.attributes && ja(function (a) {\n      return a.innerHTML = \"<input/>\", a.firstChild.setAttribute(\"value\", \"\"), \"\" === a.firstChild.getAttribute(\"value\");\n    }) || ka(\"value\", function (a, b, c) {\n      return c || \"input\" !== a.nodeName.toLowerCase() ? void 0 : a.defaultValue;\n    }), ja(function (a) {\n      return null == a.getAttribute(\"disabled\");\n    }) || ka(K, function (a, b, c) {\n      var d;\n      return c ? void 0 : a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;\n    }), ga;\n  }(a);\n\n  n.find = t, n.expr = t.selectors, n.expr[\":\"] = n.expr.pseudos, n.unique = t.uniqueSort, n.text = t.getText, n.isXMLDoc = t.isXML, n.contains = t.contains;\n  var u = n.expr.match.needsContext,\n      v = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,\n      w = /^.[^:#\\[\\.,]*$/;\n\n  function x(a, b, c) {\n    if (n.isFunction(b)) return n.grep(a, function (a, d) {\n      return !!b.call(a, d, a) !== c;\n    });\n    if (b.nodeType) return n.grep(a, function (a) {\n      return a === b !== c;\n    });\n\n    if (\"string\" == typeof b) {\n      if (w.test(b)) return n.filter(b, a, c);\n      b = n.filter(b, a);\n    }\n\n    return n.grep(a, function (a) {\n      return g.call(b, a) >= 0 !== c;\n    });\n  }\n\n  n.filter = function (a, b, c) {\n    var d = b[0];\n    return c && (a = \":not(\" + a + \")\"), 1 === b.length && 1 === d.nodeType ? n.find.matchesSelector(d, a) ? [d] : [] : n.find.matches(a, n.grep(b, function (a) {\n      return 1 === a.nodeType;\n    }));\n  }, n.fn.extend({\n    find: function find(a) {\n      var b,\n          c = this.length,\n          d = [],\n          e = this;\n      if (\"string\" != typeof a) return this.pushStack(n(a).filter(function () {\n        for (b = 0; c > b; b++) {\n          if (n.contains(e[b], this)) return !0;\n        }\n      }));\n\n      for (b = 0; c > b; b++) {\n        n.find(a, e[b], d);\n      }\n\n      return d = this.pushStack(c > 1 ? n.unique(d) : d), d.selector = this.selector ? this.selector + \" \" + a : a, d;\n    },\n    filter: function filter(a) {\n      return this.pushStack(x(this, a || [], !1));\n    },\n    not: function not(a) {\n      return this.pushStack(x(this, a || [], !0));\n    },\n    is: function is(a) {\n      return !!x(this, \"string\" == typeof a && u.test(a) ? n(a) : a || [], !1).length;\n    }\n  });\n\n  var y,\n      z = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n      A = n.fn.init = function (a, b) {\n    var c, d;\n    if (!a) return this;\n\n    if (\"string\" == typeof a) {\n      if (c = \"<\" === a[0] && \">\" === a[a.length - 1] && a.length >= 3 ? [null, a, null] : z.exec(a), !c || !c[1] && b) return !b || b.jquery ? (b || y).find(a) : this.constructor(b).find(a);\n\n      if (c[1]) {\n        if (b = b instanceof n ? b[0] : b, n.merge(this, n.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : l, !0)), v.test(c[1]) && n.isPlainObject(b)) for (c in b) {\n          n.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]);\n        }\n        return this;\n      }\n\n      return d = l.getElementById(c[2]), d && d.parentNode && (this.length = 1, this[0] = d), this.context = l, this.selector = a, this;\n    }\n\n    return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : n.isFunction(a) ? \"undefined\" != typeof y.ready ? y.ready(a) : a(n) : (void 0 !== a.selector && (this.selector = a.selector, this.context = a.context), n.makeArray(a, this));\n  };\n\n  A.prototype = n.fn, y = n(l);\n  var B = /^(?:parents|prev(?:Until|All))/,\n      C = {\n    children: !0,\n    contents: !0,\n    next: !0,\n    prev: !0\n  };\n  n.extend({\n    dir: function dir(a, b, c) {\n      var d = [],\n          e = void 0 !== c;\n\n      while ((a = a[b]) && 9 !== a.nodeType) {\n        if (1 === a.nodeType) {\n          if (e && n(a).is(c)) break;\n          d.push(a);\n        }\n      }\n\n      return d;\n    },\n    sibling: function sibling(a, b) {\n      for (var c = []; a; a = a.nextSibling) {\n        1 === a.nodeType && a !== b && c.push(a);\n      }\n\n      return c;\n    }\n  }), n.fn.extend({\n    has: function has(a) {\n      var b = n(a, this),\n          c = b.length;\n      return this.filter(function () {\n        for (var a = 0; c > a; a++) {\n          if (n.contains(this, b[a])) return !0;\n        }\n      });\n    },\n    closest: function closest(a, b) {\n      for (var c, d = 0, e = this.length, f = [], g = u.test(a) || \"string\" != typeof a ? n(a, b || this.context) : 0; e > d; d++) {\n        for (c = this[d]; c && c !== b; c = c.parentNode) {\n          if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && n.find.matchesSelector(c, a))) {\n            f.push(c);\n            break;\n          }\n        }\n      }\n\n      return this.pushStack(f.length > 1 ? n.unique(f) : f);\n    },\n    index: function index(a) {\n      return a ? \"string\" == typeof a ? g.call(n(a), this[0]) : g.call(this, a.jquery ? a[0] : a) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n    },\n    add: function add(a, b) {\n      return this.pushStack(n.unique(n.merge(this.get(), n(a, b))));\n    },\n    addBack: function addBack(a) {\n      return this.add(null == a ? this.prevObject : this.prevObject.filter(a));\n    }\n  });\n\n  function D(a, b) {\n    while ((a = a[b]) && 1 !== a.nodeType) {\n      ;\n    }\n\n    return a;\n  }\n\n  n.each({\n    parent: function parent(a) {\n      var b = a.parentNode;\n      return b && 11 !== b.nodeType ? b : null;\n    },\n    parents: function parents(a) {\n      return n.dir(a, \"parentNode\");\n    },\n    parentsUntil: function parentsUntil(a, b, c) {\n      return n.dir(a, \"parentNode\", c);\n    },\n    next: function next(a) {\n      return D(a, \"nextSibling\");\n    },\n    prev: function prev(a) {\n      return D(a, \"previousSibling\");\n    },\n    nextAll: function nextAll(a) {\n      return n.dir(a, \"nextSibling\");\n    },\n    prevAll: function prevAll(a) {\n      return n.dir(a, \"previousSibling\");\n    },\n    nextUntil: function nextUntil(a, b, c) {\n      return n.dir(a, \"nextSibling\", c);\n    },\n    prevUntil: function prevUntil(a, b, c) {\n      return n.dir(a, \"previousSibling\", c);\n    },\n    siblings: function siblings(a) {\n      return n.sibling((a.parentNode || {}).firstChild, a);\n    },\n    children: function children(a) {\n      return n.sibling(a.firstChild);\n    },\n    contents: function contents(a) {\n      return a.contentDocument || n.merge([], a.childNodes);\n    }\n  }, function (a, b) {\n    n.fn[a] = function (c, d) {\n      var e = n.map(this, b, c);\n      return \"Until\" !== a.slice(-5) && (d = c), d && \"string\" == typeof d && (e = n.filter(d, e)), this.length > 1 && (C[a] || n.unique(e), B.test(a) && e.reverse()), this.pushStack(e);\n    };\n  });\n  var E = /\\S+/g,\n      F = {};\n\n  function G(a) {\n    var b = F[a] = {};\n    return n.each(a.match(E) || [], function (a, c) {\n      b[c] = !0;\n    }), b;\n  }\n\n  n.Callbacks = function (a) {\n    a = \"string\" == typeof a ? F[a] || G(a) : n.extend({}, a);\n\n    var b,\n        c,\n        d,\n        e,\n        f,\n        g,\n        h = [],\n        i = !a.once && [],\n        j = function j(l) {\n      for (b = a.memory && l, c = !0, g = e || 0, e = 0, f = h.length, d = !0; h && f > g; g++) {\n        if (h[g].apply(l[0], l[1]) === !1 && a.stopOnFalse) {\n          b = !1;\n          break;\n        }\n      }\n\n      d = !1, h && (i ? i.length && j(i.shift()) : b ? h = [] : k.disable());\n    },\n        k = {\n      add: function add() {\n        if (h) {\n          var c = h.length;\n          !function g(b) {\n            n.each(b, function (b, c) {\n              var d = n.type(c);\n              \"function\" === d ? a.unique && k.has(c) || h.push(c) : c && c.length && \"string\" !== d && g(c);\n            });\n          }(arguments), d ? f = h.length : b && (e = c, j(b));\n        }\n\n        return this;\n      },\n      remove: function remove() {\n        return h && n.each(arguments, function (a, b) {\n          var c;\n\n          while ((c = n.inArray(b, h, c)) > -1) {\n            h.splice(c, 1), d && (f >= c && f--, g >= c && g--);\n          }\n        }), this;\n      },\n      has: function has(a) {\n        return a ? n.inArray(a, h) > -1 : !(!h || !h.length);\n      },\n      empty: function empty() {\n        return h = [], f = 0, this;\n      },\n      disable: function disable() {\n        return h = i = b = void 0, this;\n      },\n      disabled: function disabled() {\n        return !h;\n      },\n      lock: function lock() {\n        return i = void 0, b || k.disable(), this;\n      },\n      locked: function locked() {\n        return !i;\n      },\n      fireWith: function fireWith(a, b) {\n        return !h || c && !i || (b = b || [], b = [a, b.slice ? b.slice() : b], d ? i.push(b) : j(b)), this;\n      },\n      fire: function fire() {\n        return k.fireWith(this, arguments), this;\n      },\n      fired: function fired() {\n        return !!c;\n      }\n    };\n\n    return k;\n  }, n.extend({\n    Deferred: function Deferred(a) {\n      var b = [[\"resolve\", \"done\", n.Callbacks(\"once memory\"), \"resolved\"], [\"reject\", \"fail\", n.Callbacks(\"once memory\"), \"rejected\"], [\"notify\", \"progress\", n.Callbacks(\"memory\")]],\n          c = \"pending\",\n          d = {\n        state: function state() {\n          return c;\n        },\n        always: function always() {\n          return e.done(arguments).fail(arguments), this;\n        },\n        then: function then() {\n          var a = arguments;\n          return n.Deferred(function (c) {\n            n.each(b, function (b, f) {\n              var g = n.isFunction(a[b]) && a[b];\n              e[f[1]](function () {\n                var a = g && g.apply(this, arguments);\n                a && n.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f[0] + \"With\"](this === d ? c.promise() : this, g ? [a] : arguments);\n              });\n            }), a = null;\n          }).promise();\n        },\n        promise: function promise(a) {\n          return null != a ? n.extend(a, d) : d;\n        }\n      },\n          e = {};\n      return d.pipe = d.then, n.each(b, function (a, f) {\n        var g = f[2],\n            h = f[3];\n        d[f[1]] = g.add, h && g.add(function () {\n          c = h;\n        }, b[1 ^ a][2].disable, b[2][2].lock), e[f[0]] = function () {\n          return e[f[0] + \"With\"](this === e ? d : this, arguments), this;\n        }, e[f[0] + \"With\"] = g.fireWith;\n      }), d.promise(e), a && a.call(e, e), e;\n    },\n    when: function when(a) {\n      var b = 0,\n          c = d.call(arguments),\n          e = c.length,\n          f = 1 !== e || a && n.isFunction(a.promise) ? e : 0,\n          g = 1 === f ? a : n.Deferred(),\n          h = function h(a, b, c) {\n        return function (e) {\n          b[a] = this, c[a] = arguments.length > 1 ? d.call(arguments) : e, c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c);\n        };\n      },\n          i,\n          j,\n          k;\n\n      if (e > 1) for (i = new Array(e), j = new Array(e), k = new Array(e); e > b; b++) {\n        c[b] && n.isFunction(c[b].promise) ? c[b].promise().done(h(b, k, c)).fail(g.reject).progress(h(b, j, i)) : --f;\n      }\n      return f || g.resolveWith(k, c), g.promise();\n    }\n  });\n  var H;\n  n.fn.ready = function (a) {\n    return n.ready.promise().done(a), this;\n  }, n.extend({\n    isReady: !1,\n    readyWait: 1,\n    holdReady: function holdReady(a) {\n      a ? n.readyWait++ : n.ready(!0);\n    },\n    ready: function ready(a) {\n      (a === !0 ? --n.readyWait : n.isReady) || (n.isReady = !0, a !== !0 && --n.readyWait > 0 || (H.resolveWith(l, [n]), n.fn.triggerHandler && (n(l).triggerHandler(\"ready\"), n(l).off(\"ready\"))));\n    }\n  });\n\n  function I() {\n    l.removeEventListener(\"DOMContentLoaded\", I, !1), a.removeEventListener(\"load\", I, !1), n.ready();\n  }\n\n  n.ready.promise = function (b) {\n    return H || (H = n.Deferred(), \"complete\" === l.readyState ? setTimeout(n.ready) : (l.addEventListener(\"DOMContentLoaded\", I, !1), a.addEventListener(\"load\", I, !1))), H.promise(b);\n  }, n.ready.promise();\n\n  var J = n.access = function (a, b, c, d, e, f, g) {\n    var h = 0,\n        i = a.length,\n        j = null == c;\n\n    if (\"object\" === n.type(c)) {\n      e = !0;\n\n      for (h in c) {\n        n.access(a, b, h, c[h], !0, f, g);\n      }\n    } else if (void 0 !== d && (e = !0, n.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function b(a, _b, c) {\n      return j.call(n(a), c);\n    })), b)) for (; i > h; h++) {\n      b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));\n    }\n\n    return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;\n  };\n\n  n.acceptData = function (a) {\n    return 1 === a.nodeType || 9 === a.nodeType || !+a.nodeType;\n  };\n\n  function K() {\n    Object.defineProperty(this.cache = {}, 0, {\n      get: function get() {\n        return {};\n      }\n    }), this.expando = n.expando + K.uid++;\n  }\n\n  K.uid = 1, K.accepts = n.acceptData, K.prototype = {\n    key: function key(a) {\n      if (!K.accepts(a)) return 0;\n      var b = {},\n          c = a[this.expando];\n\n      if (!c) {\n        c = K.uid++;\n\n        try {\n          b[this.expando] = {\n            value: c\n          }, Object.defineProperties(a, b);\n        } catch (d) {\n          b[this.expando] = c, n.extend(a, b);\n        }\n      }\n\n      return this.cache[c] || (this.cache[c] = {}), c;\n    },\n    set: function set(a, b, c) {\n      var d,\n          e = this.key(a),\n          f = this.cache[e];\n      if (\"string\" == typeof b) f[b] = c;else if (n.isEmptyObject(f)) n.extend(this.cache[e], b);else for (d in b) {\n        f[d] = b[d];\n      }\n      return f;\n    },\n    get: function get(a, b) {\n      var c = this.cache[this.key(a)];\n      return void 0 === b ? c : c[b];\n    },\n    access: function access(a, b, c) {\n      var d;\n      return void 0 === b || b && \"string\" == typeof b && void 0 === c ? (d = this.get(a, b), void 0 !== d ? d : this.get(a, n.camelCase(b))) : (this.set(a, b, c), void 0 !== c ? c : b);\n    },\n    remove: function remove(a, b) {\n      var c,\n          d,\n          e,\n          f = this.key(a),\n          g = this.cache[f];\n      if (void 0 === b) this.cache[f] = {};else {\n        n.isArray(b) ? d = b.concat(b.map(n.camelCase)) : (e = n.camelCase(b), b in g ? d = [b, e] : (d = e, d = d in g ? [d] : d.match(E) || [])), c = d.length;\n\n        while (c--) {\n          delete g[d[c]];\n        }\n      }\n    },\n    hasData: function hasData(a) {\n      return !n.isEmptyObject(this.cache[a[this.expando]] || {});\n    },\n    discard: function discard(a) {\n      a[this.expando] && delete this.cache[a[this.expando]];\n    }\n  };\n  var L = new K(),\n      M = new K(),\n      N = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n      O = /([A-Z])/g;\n\n  function P(a, b, c) {\n    var d;\n    if (void 0 === c && 1 === a.nodeType) if (d = \"data-\" + b.replace(O, \"-$1\").toLowerCase(), c = a.getAttribute(d), \"string\" == typeof c) {\n      try {\n        c = \"true\" === c ? !0 : \"false\" === c ? !1 : \"null\" === c ? null : +c + \"\" === c ? +c : N.test(c) ? n.parseJSON(c) : c;\n      } catch (e) {}\n\n      M.set(a, b, c);\n    } else c = void 0;\n    return c;\n  }\n\n  n.extend({\n    hasData: function hasData(a) {\n      return M.hasData(a) || L.hasData(a);\n    },\n    data: function data(a, b, c) {\n      return M.access(a, b, c);\n    },\n    removeData: function removeData(a, b) {\n      M.remove(a, b);\n    },\n    _data: function _data(a, b, c) {\n      return L.access(a, b, c);\n    },\n    _removeData: function _removeData(a, b) {\n      L.remove(a, b);\n    }\n  }), n.fn.extend({\n    data: function data(a, b) {\n      var c,\n          d,\n          e,\n          f = this[0],\n          g = f && f.attributes;\n\n      if (void 0 === a) {\n        if (this.length && (e = M.get(f), 1 === f.nodeType && !L.get(f, \"hasDataAttrs\"))) {\n          c = g.length;\n\n          while (c--) {\n            g[c] && (d = g[c].name, 0 === d.indexOf(\"data-\") && (d = n.camelCase(d.slice(5)), P(f, d, e[d])));\n          }\n\n          L.set(f, \"hasDataAttrs\", !0);\n        }\n\n        return e;\n      }\n\n      return \"object\" == _typeof(a) ? this.each(function () {\n        M.set(this, a);\n      }) : J(this, function (b) {\n        var c,\n            d = n.camelCase(a);\n\n        if (f && void 0 === b) {\n          if (c = M.get(f, a), void 0 !== c) return c;\n          if (c = M.get(f, d), void 0 !== c) return c;\n          if (c = P(f, d, void 0), void 0 !== c) return c;\n        } else this.each(function () {\n          var c = M.get(this, d);\n          M.set(this, d, b), -1 !== a.indexOf(\"-\") && void 0 !== c && M.set(this, a, b);\n        });\n      }, null, b, arguments.length > 1, null, !0);\n    },\n    removeData: function removeData(a) {\n      return this.each(function () {\n        M.remove(this, a);\n      });\n    }\n  }), n.extend({\n    queue: function queue(a, b, c) {\n      var d;\n      return a ? (b = (b || \"fx\") + \"queue\", d = L.get(a, b), c && (!d || n.isArray(c) ? d = L.access(a, b, n.makeArray(c)) : d.push(c)), d || []) : void 0;\n    },\n    dequeue: function dequeue(a, b) {\n      b = b || \"fx\";\n\n      var c = n.queue(a, b),\n          d = c.length,\n          e = c.shift(),\n          f = n._queueHooks(a, b),\n          g = function g() {\n        n.dequeue(a, b);\n      };\n\n      \"inprogress\" === e && (e = c.shift(), d--), e && (\"fx\" === b && c.unshift(\"inprogress\"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();\n    },\n    _queueHooks: function _queueHooks(a, b) {\n      var c = b + \"queueHooks\";\n      return L.get(a, c) || L.access(a, c, {\n        empty: n.Callbacks(\"once memory\").add(function () {\n          L.remove(a, [b + \"queue\", c]);\n        })\n      });\n    }\n  }), n.fn.extend({\n    queue: function queue(a, b) {\n      var c = 2;\n      return \"string\" != typeof a && (b = a, a = \"fx\", c--), arguments.length < c ? n.queue(this[0], a) : void 0 === b ? this : this.each(function () {\n        var c = n.queue(this, a, b);\n        n._queueHooks(this, a), \"fx\" === a && \"inprogress\" !== c[0] && n.dequeue(this, a);\n      });\n    },\n    dequeue: function dequeue(a) {\n      return this.each(function () {\n        n.dequeue(this, a);\n      });\n    },\n    clearQueue: function clearQueue(a) {\n      return this.queue(a || \"fx\", []);\n    },\n    promise: function promise(a, b) {\n      var c,\n          d = 1,\n          e = n.Deferred(),\n          f = this,\n          g = this.length,\n          h = function h() {\n        --d || e.resolveWith(f, [f]);\n      };\n\n      \"string\" != typeof a && (b = a, a = void 0), a = a || \"fx\";\n\n      while (g--) {\n        c = L.get(f[g], a + \"queueHooks\"), c && c.empty && (d++, c.empty.add(h));\n      }\n\n      return h(), e.promise(b);\n    }\n  });\n\n  var Q = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,\n      R = [\"Top\", \"Right\", \"Bottom\", \"Left\"],\n      S = function S(a, b) {\n    return a = b || a, \"none\" === n.css(a, \"display\") || !n.contains(a.ownerDocument, a);\n  },\n      T = /^(?:checkbox|radio)$/i;\n\n  !function () {\n    var a = l.createDocumentFragment(),\n        b = a.appendChild(l.createElement(\"div\")),\n        c = l.createElement(\"input\");\n    c.setAttribute(\"type\", \"radio\"), c.setAttribute(\"checked\", \"checked\"), c.setAttribute(\"name\", \"t\"), b.appendChild(c), k.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, b.innerHTML = \"<textarea>x</textarea>\", k.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue;\n  }();\n  var U = \"undefined\";\n  k.focusinBubbles = \"onfocusin\" in a;\n  var V = /^key/,\n      W = /^(?:mouse|pointer|contextmenu)|click/,\n      X = /^(?:focusinfocus|focusoutblur)$/,\n      Y = /^([^.]*)(?:\\.(.+)|)$/;\n\n  function Z() {\n    return !0;\n  }\n\n  function $() {\n    return !1;\n  }\n\n  function _() {\n    try {\n      return l.activeElement;\n    } catch (a) {}\n  }\n\n  n.event = {\n    global: {},\n    add: function add(a, b, c, d, e) {\n      var f,\n          g,\n          h,\n          i,\n          j,\n          k,\n          l,\n          m,\n          o,\n          p,\n          q,\n          r = L.get(a);\n\n      if (r) {\n        c.handler && (f = c, c = f.handler, e = f.selector), c.guid || (c.guid = n.guid++), (i = r.events) || (i = r.events = {}), (g = r.handle) || (g = r.handle = function (b) {\n          return _typeof(n) !== U && n.event.triggered !== b.type ? n.event.dispatch.apply(a, arguments) : void 0;\n        }), b = (b || \"\").match(E) || [\"\"], j = b.length;\n\n        while (j--) {\n          h = Y.exec(b[j]) || [], o = q = h[1], p = (h[2] || \"\").split(\".\").sort(), o && (l = n.event.special[o] || {}, o = (e ? l.delegateType : l.bindType) || o, l = n.event.special[o] || {}, k = n.extend({\n            type: o,\n            origType: q,\n            data: d,\n            handler: c,\n            guid: c.guid,\n            selector: e,\n            needsContext: e && n.expr.match.needsContext.test(e),\n            namespace: p.join(\".\")\n          }, f), (m = i[o]) || (m = i[o] = [], m.delegateCount = 0, l.setup && l.setup.call(a, d, p, g) !== !1 || a.addEventListener && a.addEventListener(o, g, !1)), l.add && (l.add.call(a, k), k.handler.guid || (k.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, k) : m.push(k), n.event.global[o] = !0);\n        }\n      }\n    },\n    remove: function remove(a, b, c, d, e) {\n      var f,\n          g,\n          h,\n          i,\n          j,\n          k,\n          l,\n          m,\n          o,\n          p,\n          q,\n          r = L.hasData(a) && L.get(a);\n\n      if (r && (i = r.events)) {\n        b = (b || \"\").match(E) || [\"\"], j = b.length;\n\n        while (j--) {\n          if (h = Y.exec(b[j]) || [], o = q = h[1], p = (h[2] || \"\").split(\".\").sort(), o) {\n            l = n.event.special[o] || {}, o = (d ? l.delegateType : l.bindType) || o, m = i[o] || [], h = h[2] && new RegExp(\"(^|\\\\.)\" + p.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\"), g = f = m.length;\n\n            while (f--) {\n              k = m[f], !e && q !== k.origType || c && c.guid !== k.guid || h && !h.test(k.namespace) || d && d !== k.selector && (\"**\" !== d || !k.selector) || (m.splice(f, 1), k.selector && m.delegateCount--, l.remove && l.remove.call(a, k));\n            }\n\n            g && !m.length && (l.teardown && l.teardown.call(a, p, r.handle) !== !1 || n.removeEvent(a, o, r.handle), delete i[o]);\n          } else for (o in i) {\n            n.event.remove(a, o + b[j], c, d, !0);\n          }\n        }\n\n        n.isEmptyObject(i) && (delete r.handle, L.remove(a, \"events\"));\n      }\n    },\n    trigger: function trigger(b, c, d, e) {\n      var f,\n          g,\n          h,\n          i,\n          k,\n          m,\n          o,\n          p = [d || l],\n          q = j.call(b, \"type\") ? b.type : b,\n          r = j.call(b, \"namespace\") ? b.namespace.split(\".\") : [];\n\n      if (g = h = d = d || l, 3 !== d.nodeType && 8 !== d.nodeType && !X.test(q + n.event.triggered) && (q.indexOf(\".\") >= 0 && (r = q.split(\".\"), q = r.shift(), r.sort()), k = q.indexOf(\":\") < 0 && \"on\" + q, b = b[n.expando] ? b : new n.Event(q, \"object\" == _typeof(b) && b), b.isTrigger = e ? 2 : 3, b.namespace = r.join(\".\"), b.namespace_re = b.namespace ? new RegExp(\"(^|\\\\.)\" + r.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null, b.result = void 0, b.target || (b.target = d), c = null == c ? [b] : n.makeArray(c, [b]), o = n.event.special[q] || {}, e || !o.trigger || o.trigger.apply(d, c) !== !1)) {\n        if (!e && !o.noBubble && !n.isWindow(d)) {\n          for (i = o.delegateType || q, X.test(i + q) || (g = g.parentNode); g; g = g.parentNode) {\n            p.push(g), h = g;\n          }\n\n          h === (d.ownerDocument || l) && p.push(h.defaultView || h.parentWindow || a);\n        }\n\n        f = 0;\n\n        while ((g = p[f++]) && !b.isPropagationStopped()) {\n          b.type = f > 1 ? i : o.bindType || q, m = (L.get(g, \"events\") || {})[b.type] && L.get(g, \"handle\"), m && m.apply(g, c), m = k && g[k], m && m.apply && n.acceptData(g) && (b.result = m.apply(g, c), b.result === !1 && b.preventDefault());\n        }\n\n        return b.type = q, e || b.isDefaultPrevented() || o._default && o._default.apply(p.pop(), c) !== !1 || !n.acceptData(d) || k && n.isFunction(d[q]) && !n.isWindow(d) && (h = d[k], h && (d[k] = null), n.event.triggered = q, d[q](), n.event.triggered = void 0, h && (d[k] = h)), b.result;\n      }\n    },\n    dispatch: function dispatch(a) {\n      a = n.event.fix(a);\n      var b,\n          c,\n          e,\n          f,\n          g,\n          h = [],\n          i = d.call(arguments),\n          j = (L.get(this, \"events\") || {})[a.type] || [],\n          k = n.event.special[a.type] || {};\n\n      if (i[0] = a, a.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, a) !== !1) {\n        h = n.event.handlers.call(this, a, j), b = 0;\n\n        while ((f = h[b++]) && !a.isPropagationStopped()) {\n          a.currentTarget = f.elem, c = 0;\n\n          while ((g = f.handlers[c++]) && !a.isImmediatePropagationStopped()) {\n            (!a.namespace_re || a.namespace_re.test(g.namespace)) && (a.handleObj = g, a.data = g.data, e = ((n.event.special[g.origType] || {}).handle || g.handler).apply(f.elem, i), void 0 !== e && (a.result = e) === !1 && (a.preventDefault(), a.stopPropagation()));\n          }\n        }\n\n        return k.postDispatch && k.postDispatch.call(this, a), a.result;\n      }\n    },\n    handlers: function handlers(a, b) {\n      var c,\n          d,\n          e,\n          f,\n          g = [],\n          h = b.delegateCount,\n          i = a.target;\n      if (h && i.nodeType && (!a.button || \"click\" !== a.type)) for (; i !== this; i = i.parentNode || this) {\n        if (i.disabled !== !0 || \"click\" !== a.type) {\n          for (d = [], c = 0; h > c; c++) {\n            f = b[c], e = f.selector + \" \", void 0 === d[e] && (d[e] = f.needsContext ? n(e, this).index(i) >= 0 : n.find(e, this, null, [i]).length), d[e] && d.push(f);\n          }\n\n          d.length && g.push({\n            elem: i,\n            handlers: d\n          });\n        }\n      }\n      return h < b.length && g.push({\n        elem: this,\n        handlers: b.slice(h)\n      }), g;\n    },\n    props: \"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),\n    fixHooks: {},\n    keyHooks: {\n      props: \"char charCode key keyCode\".split(\" \"),\n      filter: function filter(a, b) {\n        return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a;\n      }\n    },\n    mouseHooks: {\n      props: \"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),\n      filter: function filter(a, b) {\n        var c,\n            d,\n            e,\n            f = b.button;\n        return null == a.pageX && null != b.clientX && (c = a.target.ownerDocument || l, d = c.documentElement, e = c.body, a.pageX = b.clientX + (d && d.scrollLeft || e && e.scrollLeft || 0) - (d && d.clientLeft || e && e.clientLeft || 0), a.pageY = b.clientY + (d && d.scrollTop || e && e.scrollTop || 0) - (d && d.clientTop || e && e.clientTop || 0)), a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0), a;\n      }\n    },\n    fix: function fix(a) {\n      if (a[n.expando]) return a;\n      var b,\n          c,\n          d,\n          e = a.type,\n          f = a,\n          g = this.fixHooks[e];\n      g || (this.fixHooks[e] = g = W.test(e) ? this.mouseHooks : V.test(e) ? this.keyHooks : {}), d = g.props ? this.props.concat(g.props) : this.props, a = new n.Event(f), b = d.length;\n\n      while (b--) {\n        c = d[b], a[c] = f[c];\n      }\n\n      return a.target || (a.target = l), 3 === a.target.nodeType && (a.target = a.target.parentNode), g.filter ? g.filter(a, f) : a;\n    },\n    special: {\n      load: {\n        noBubble: !0\n      },\n      focus: {\n        trigger: function trigger() {\n          return this !== _() && this.focus ? (this.focus(), !1) : void 0;\n        },\n        delegateType: \"focusin\"\n      },\n      blur: {\n        trigger: function trigger() {\n          return this === _() && this.blur ? (this.blur(), !1) : void 0;\n        },\n        delegateType: \"focusout\"\n      },\n      click: {\n        trigger: function trigger() {\n          return \"checkbox\" === this.type && this.click && n.nodeName(this, \"input\") ? (this.click(), !1) : void 0;\n        },\n        _default: function _default(a) {\n          return n.nodeName(a.target, \"a\");\n        }\n      },\n      beforeunload: {\n        postDispatch: function postDispatch(a) {\n          void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);\n        }\n      }\n    },\n    simulate: function simulate(a, b, c, d) {\n      var e = n.extend(new n.Event(), c, {\n        type: a,\n        isSimulated: !0,\n        originalEvent: {}\n      });\n      d ? n.event.trigger(e, null, b) : n.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault();\n    }\n  }, n.removeEvent = function (a, b, c) {\n    a.removeEventListener && a.removeEventListener(b, c, !1);\n  }, n.Event = function (a, b) {\n    return this instanceof n.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? Z : $) : this.type = a, b && n.extend(this, b), this.timeStamp = a && a.timeStamp || n.now(), void (this[n.expando] = !0)) : new n.Event(a, b);\n  }, n.Event.prototype = {\n    isDefaultPrevented: $,\n    isPropagationStopped: $,\n    isImmediatePropagationStopped: $,\n    preventDefault: function preventDefault() {\n      var a = this.originalEvent;\n      this.isDefaultPrevented = Z, a && a.preventDefault && a.preventDefault();\n    },\n    stopPropagation: function stopPropagation() {\n      var a = this.originalEvent;\n      this.isPropagationStopped = Z, a && a.stopPropagation && a.stopPropagation();\n    },\n    stopImmediatePropagation: function stopImmediatePropagation() {\n      var a = this.originalEvent;\n      this.isImmediatePropagationStopped = Z, a && a.stopImmediatePropagation && a.stopImmediatePropagation(), this.stopPropagation();\n    }\n  }, n.each({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\",\n    pointerenter: \"pointerover\",\n    pointerleave: \"pointerout\"\n  }, function (a, b) {\n    n.event.special[a] = {\n      delegateType: b,\n      bindType: b,\n      handle: function handle(a) {\n        var c,\n            d = this,\n            e = a.relatedTarget,\n            f = a.handleObj;\n        return (!e || e !== d && !n.contains(d, e)) && (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;\n      }\n    };\n  }), k.focusinBubbles || n.each({\n    focus: \"focusin\",\n    blur: \"focusout\"\n  }, function (a, b) {\n    var c = function c(a) {\n      n.event.simulate(b, a.target, n.event.fix(a), !0);\n    };\n\n    n.event.special[b] = {\n      setup: function setup() {\n        var d = this.ownerDocument || this,\n            e = L.access(d, b);\n        e || d.addEventListener(a, c, !0), L.access(d, b, (e || 0) + 1);\n      },\n      teardown: function teardown() {\n        var d = this.ownerDocument || this,\n            e = L.access(d, b) - 1;\n        e ? L.access(d, b, e) : (d.removeEventListener(a, c, !0), L.remove(d, b));\n      }\n    };\n  }), n.fn.extend({\n    on: function on(a, b, c, d, e) {\n      var f, g;\n\n      if (\"object\" == _typeof(a)) {\n        \"string\" != typeof b && (c = c || b, b = void 0);\n\n        for (g in a) {\n          this.on(g, b, c, a[g], e);\n        }\n\n        return this;\n      }\n\n      if (null == c && null == d ? (d = b, c = b = void 0) : null == d && (\"string\" == typeof b ? (d = c, c = void 0) : (d = c, c = b, b = void 0)), d === !1) d = $;else if (!d) return this;\n      return 1 === e && (f = d, d = function d(a) {\n        return n().off(a), f.apply(this, arguments);\n      }, d.guid = f.guid || (f.guid = n.guid++)), this.each(function () {\n        n.event.add(this, a, d, c, b);\n      });\n    },\n    one: function one(a, b, c, d) {\n      return this.on(a, b, c, d, 1);\n    },\n    off: function off(a, b, c) {\n      var d, e;\n      if (a && a.preventDefault && a.handleObj) return d = a.handleObj, n(a.delegateTarget).off(d.namespace ? d.origType + \".\" + d.namespace : d.origType, d.selector, d.handler), this;\n\n      if (\"object\" == _typeof(a)) {\n        for (e in a) {\n          this.off(e, b, a[e]);\n        }\n\n        return this;\n      }\n\n      return (b === !1 || \"function\" == typeof b) && (c = b, b = void 0), c === !1 && (c = $), this.each(function () {\n        n.event.remove(this, a, c, b);\n      });\n    },\n    trigger: function trigger(a, b) {\n      return this.each(function () {\n        n.event.trigger(a, b, this);\n      });\n    },\n    triggerHandler: function triggerHandler(a, b) {\n      var c = this[0];\n      return c ? n.event.trigger(a, b, c, !0) : void 0;\n    }\n  });\n  var aa = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,\n      ba = /<([\\w:]+)/,\n      ca = /<|&#?\\w+;/,\n      da = /<(?:script|style|link)/i,\n      ea = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n      fa = /^$|\\/(?:java|ecma)script/i,\n      ga = /^true\\/(.*)/,\n      ha = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,\n      ia = {\n    option: [1, \"<select multiple='multiple'>\", \"</select>\"],\n    thead: [1, \"<table>\", \"</table>\"],\n    col: [2, \"<table><colgroup>\", \"</colgroup></table>\"],\n    tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n    td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n    _default: [0, \"\", \"\"]\n  };\n  ia.optgroup = ia.option, ia.tbody = ia.tfoot = ia.colgroup = ia.caption = ia.thead, ia.th = ia.td;\n\n  function ja(a, b) {\n    return n.nodeName(a, \"table\") && n.nodeName(11 !== b.nodeType ? b : b.firstChild, \"tr\") ? a.getElementsByTagName(\"tbody\")[0] || a.appendChild(a.ownerDocument.createElement(\"tbody\")) : a;\n  }\n\n  function ka(a) {\n    return a.type = (null !== a.getAttribute(\"type\")) + \"/\" + a.type, a;\n  }\n\n  function la(a) {\n    var b = ga.exec(a.type);\n    return b ? a.type = b[1] : a.removeAttribute(\"type\"), a;\n  }\n\n  function ma(a, b) {\n    for (var c = 0, d = a.length; d > c; c++) {\n      L.set(a[c], \"globalEval\", !b || L.get(b[c], \"globalEval\"));\n    }\n  }\n\n  function na(a, b) {\n    var c, d, e, f, g, h, i, j;\n\n    if (1 === b.nodeType) {\n      if (L.hasData(a) && (f = L.access(a), g = L.set(b, f), j = f.events)) {\n        delete g.handle, g.events = {};\n\n        for (e in j) {\n          for (c = 0, d = j[e].length; d > c; c++) {\n            n.event.add(b, e, j[e][c]);\n          }\n        }\n      }\n\n      M.hasData(a) && (h = M.access(a), i = n.extend({}, h), M.set(b, i));\n    }\n  }\n\n  function oa(a, b) {\n    var c = a.getElementsByTagName ? a.getElementsByTagName(b || \"*\") : a.querySelectorAll ? a.querySelectorAll(b || \"*\") : [];\n    return void 0 === b || b && n.nodeName(a, b) ? n.merge([a], c) : c;\n  }\n\n  function pa(a, b) {\n    var c = b.nodeName.toLowerCase();\n    \"input\" === c && T.test(a.type) ? b.checked = a.checked : (\"input\" === c || \"textarea\" === c) && (b.defaultValue = a.defaultValue);\n  }\n\n  n.extend({\n    clone: function clone(a, b, c) {\n      var d,\n          e,\n          f,\n          g,\n          h = a.cloneNode(!0),\n          i = n.contains(a.ownerDocument, a);\n      if (!(k.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || n.isXMLDoc(a))) for (g = oa(h), f = oa(a), d = 0, e = f.length; e > d; d++) {\n        pa(f[d], g[d]);\n      }\n      if (b) if (c) for (f = f || oa(a), g = g || oa(h), d = 0, e = f.length; e > d; d++) {\n        na(f[d], g[d]);\n      } else na(a, h);\n      return g = oa(h, \"script\"), g.length > 0 && ma(g, !i && oa(a, \"script\")), h;\n    },\n    buildFragment: function buildFragment(a, b, c, d) {\n      for (var e, f, g, h, i, j, k = b.createDocumentFragment(), l = [], m = 0, o = a.length; o > m; m++) {\n        if (e = a[m], e || 0 === e) if (\"object\" === n.type(e)) n.merge(l, e.nodeType ? [e] : e);else if (ca.test(e)) {\n          f = f || k.appendChild(b.createElement(\"div\")), g = (ba.exec(e) || [\"\", \"\"])[1].toLowerCase(), h = ia[g] || ia._default, f.innerHTML = h[1] + e.replace(aa, \"<$1></$2>\") + h[2], j = h[0];\n\n          while (j--) {\n            f = f.lastChild;\n          }\n\n          n.merge(l, f.childNodes), f = k.firstChild, f.textContent = \"\";\n        } else l.push(b.createTextNode(e));\n      }\n\n      k.textContent = \"\", m = 0;\n\n      while (e = l[m++]) {\n        if ((!d || -1 === n.inArray(e, d)) && (i = n.contains(e.ownerDocument, e), f = oa(k.appendChild(e), \"script\"), i && ma(f), c)) {\n          j = 0;\n\n          while (e = f[j++]) {\n            fa.test(e.type || \"\") && c.push(e);\n          }\n        }\n      }\n\n      return k;\n    },\n    cleanData: function cleanData(a) {\n      for (var b, c, d, e, f = n.event.special, g = 0; void 0 !== (c = a[g]); g++) {\n        if (n.acceptData(c) && (e = c[L.expando], e && (b = L.cache[e]))) {\n          if (b.events) for (d in b.events) {\n            f[d] ? n.event.remove(c, d) : n.removeEvent(c, d, b.handle);\n          }\n          L.cache[e] && delete L.cache[e];\n        }\n\n        delete M.cache[c[M.expando]];\n      }\n    }\n  }), n.fn.extend({\n    text: function text(a) {\n      return J(this, function (a) {\n        return void 0 === a ? n.text(this) : this.empty().each(function () {\n          (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) && (this.textContent = a);\n        });\n      }, null, a, arguments.length);\n    },\n    append: function append() {\n      return this.domManip(arguments, function (a) {\n        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {\n          var b = ja(this, a);\n          b.appendChild(a);\n        }\n      });\n    },\n    prepend: function prepend() {\n      return this.domManip(arguments, function (a) {\n        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {\n          var b = ja(this, a);\n          b.insertBefore(a, b.firstChild);\n        }\n      });\n    },\n    before: function before() {\n      return this.domManip(arguments, function (a) {\n        this.parentNode && this.parentNode.insertBefore(a, this);\n      });\n    },\n    after: function after() {\n      return this.domManip(arguments, function (a) {\n        this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);\n      });\n    },\n    remove: function remove(a, b) {\n      for (var c, d = a ? n.filter(a, this) : this, e = 0; null != (c = d[e]); e++) {\n        b || 1 !== c.nodeType || n.cleanData(oa(c)), c.parentNode && (b && n.contains(c.ownerDocument, c) && ma(oa(c, \"script\")), c.parentNode.removeChild(c));\n      }\n\n      return this;\n    },\n    empty: function empty() {\n      for (var a, b = 0; null != (a = this[b]); b++) {\n        1 === a.nodeType && (n.cleanData(oa(a, !1)), a.textContent = \"\");\n      }\n\n      return this;\n    },\n    clone: function clone(a, b) {\n      return a = null == a ? !1 : a, b = null == b ? a : b, this.map(function () {\n        return n.clone(this, a, b);\n      });\n    },\n    html: function html(a) {\n      return J(this, function (a) {\n        var b = this[0] || {},\n            c = 0,\n            d = this.length;\n        if (void 0 === a && 1 === b.nodeType) return b.innerHTML;\n\n        if (\"string\" == typeof a && !da.test(a) && !ia[(ba.exec(a) || [\"\", \"\"])[1].toLowerCase()]) {\n          a = a.replace(aa, \"<$1></$2>\");\n\n          try {\n            for (; d > c; c++) {\n              b = this[c] || {}, 1 === b.nodeType && (n.cleanData(oa(b, !1)), b.innerHTML = a);\n            }\n\n            b = 0;\n          } catch (e) {}\n        }\n\n        b && this.empty().append(a);\n      }, null, a, arguments.length);\n    },\n    replaceWith: function replaceWith() {\n      var a = arguments[0];\n      return this.domManip(arguments, function (b) {\n        a = this.parentNode, n.cleanData(oa(this)), a && a.replaceChild(b, this);\n      }), a && (a.length || a.nodeType) ? this : this.remove();\n    },\n    detach: function detach(a) {\n      return this.remove(a, !0);\n    },\n    domManip: function domManip(a, b) {\n      a = e.apply([], a);\n      var c,\n          d,\n          f,\n          g,\n          h,\n          i,\n          j = 0,\n          l = this.length,\n          m = this,\n          o = l - 1,\n          p = a[0],\n          q = n.isFunction(p);\n      if (q || l > 1 && \"string\" == typeof p && !k.checkClone && ea.test(p)) return this.each(function (c) {\n        var d = m.eq(c);\n        q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b);\n      });\n\n      if (l && (c = n.buildFragment(a, this[0].ownerDocument, !1, this), d = c.firstChild, 1 === c.childNodes.length && (c = d), d)) {\n        for (f = n.map(oa(c, \"script\"), ka), g = f.length; l > j; j++) {\n          h = c, j !== o && (h = n.clone(h, !0, !0), g && n.merge(f, oa(h, \"script\"))), b.call(this[j], h, j);\n        }\n\n        if (g) for (i = f[f.length - 1].ownerDocument, n.map(f, la), j = 0; g > j; j++) {\n          h = f[j], fa.test(h.type || \"\") && !L.access(h, \"globalEval\") && n.contains(i, h) && (h.src ? n._evalUrl && n._evalUrl(h.src) : n.globalEval(h.textContent.replace(ha, \"\")));\n        }\n      }\n\n      return this;\n    }\n  }), n.each({\n    appendTo: \"append\",\n    prependTo: \"prepend\",\n    insertBefore: \"before\",\n    insertAfter: \"after\",\n    replaceAll: \"replaceWith\"\n  }, function (a, b) {\n    n.fn[a] = function (a) {\n      for (var c, d = [], e = n(a), g = e.length - 1, h = 0; g >= h; h++) {\n        c = h === g ? this : this.clone(!0), n(e[h])[b](c), f.apply(d, c.get());\n      }\n\n      return this.pushStack(d);\n    };\n  });\n  var qa,\n      ra = {};\n\n  function sa(b, c) {\n    var d,\n        e = n(c.createElement(b)).appendTo(c.body),\n        f = a.getDefaultComputedStyle && (d = a.getDefaultComputedStyle(e[0])) ? d.display : n.css(e[0], \"display\");\n    return e.detach(), f;\n  }\n\n  function ta(a) {\n    var b = l,\n        c = ra[a];\n    return c || (c = sa(a, b), \"none\" !== c && c || (qa = (qa || n(\"<iframe frameborder='0' width='0' height='0'/>\")).appendTo(b.documentElement), b = qa[0].contentDocument, b.write(), b.close(), c = sa(a, b), qa.detach()), ra[a] = c), c;\n  }\n\n  var ua = /^margin/,\n      va = new RegExp(\"^(\" + Q + \")(?!px)[a-z%]+$\", \"i\"),\n      wa = function wa(b) {\n    return b.ownerDocument.defaultView.opener ? b.ownerDocument.defaultView.getComputedStyle(b, null) : a.getComputedStyle(b, null);\n  };\n\n  function xa(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h = a.style;\n    return c = c || wa(a), c && (g = c.getPropertyValue(b) || c[b]), c && (\"\" !== g || n.contains(a.ownerDocument, a) || (g = n.style(a, b)), va.test(g) && ua.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 !== g ? g + \"\" : g;\n  }\n\n  function ya(a, b) {\n    return {\n      get: function get() {\n        return a() ? void delete this.get : (this.get = b).apply(this, arguments);\n      }\n    };\n  }\n\n  !function () {\n    var b,\n        c,\n        d = l.documentElement,\n        e = l.createElement(\"div\"),\n        f = l.createElement(\"div\");\n\n    if (f.style) {\n      var _g = function _g() {\n        f.style.cssText = \"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute\", f.innerHTML = \"\", d.appendChild(e);\n        var g = a.getComputedStyle(f, null);\n        b = \"1%\" !== g.top, c = \"4px\" === g.width, d.removeChild(e);\n      };\n\n      f.style.backgroundClip = \"content-box\", f.cloneNode(!0).style.backgroundClip = \"\", k.clearCloneStyle = \"content-box\" === f.style.backgroundClip, e.style.cssText = \"border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute\", e.appendChild(f);\n      a.getComputedStyle && n.extend(k, {\n        pixelPosition: function pixelPosition() {\n          return _g(), b;\n        },\n        boxSizingReliable: function boxSizingReliable() {\n          return null == c && _g(), c;\n        },\n        reliableMarginRight: function reliableMarginRight() {\n          var b,\n              c = f.appendChild(l.createElement(\"div\"));\n          return c.style.cssText = f.style.cssText = \"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0\", c.style.marginRight = c.style.width = \"0\", f.style.width = \"1px\", d.appendChild(e), b = !parseFloat(a.getComputedStyle(c, null).marginRight), d.removeChild(e), f.removeChild(c), b;\n        }\n      });\n    }\n  }(), n.swap = function (a, b, c, d) {\n    var e,\n        f,\n        g = {};\n\n    for (f in b) {\n      g[f] = a.style[f], a.style[f] = b[f];\n    }\n\n    e = c.apply(a, d || []);\n\n    for (f in b) {\n      a.style[f] = g[f];\n    }\n\n    return e;\n  };\n  var za = /^(none|table(?!-c[ea]).+)/,\n      Aa = new RegExp(\"^(\" + Q + \")(.*)$\", \"i\"),\n      Ba = new RegExp(\"^([+-])=(\" + Q + \")\", \"i\"),\n      Ca = {\n    position: \"absolute\",\n    visibility: \"hidden\",\n    display: \"block\"\n  },\n      Da = {\n    letterSpacing: \"0\",\n    fontWeight: \"400\"\n  },\n      Ea = [\"Webkit\", \"O\", \"Moz\", \"ms\"];\n\n  function Fa(a, b) {\n    if (b in a) return b;\n    var c = b[0].toUpperCase() + b.slice(1),\n        d = b,\n        e = Ea.length;\n\n    while (e--) {\n      if (b = Ea[e] + c, b in a) return b;\n    }\n\n    return d;\n  }\n\n  function Ga(a, b, c) {\n    var d = Aa.exec(b);\n    return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || \"px\") : b;\n  }\n\n  function Ha(a, b, c, d, e) {\n    for (var f = c === (d ? \"border\" : \"content\") ? 4 : \"width\" === b ? 1 : 0, g = 0; 4 > f; f += 2) {\n      \"margin\" === c && (g += n.css(a, c + R[f], !0, e)), d ? (\"content\" === c && (g -= n.css(a, \"padding\" + R[f], !0, e)), \"margin\" !== c && (g -= n.css(a, \"border\" + R[f] + \"Width\", !0, e))) : (g += n.css(a, \"padding\" + R[f], !0, e), \"padding\" !== c && (g += n.css(a, \"border\" + R[f] + \"Width\", !0, e)));\n    }\n\n    return g;\n  }\n\n  function Ia(a, b, c) {\n    var d = !0,\n        e = \"width\" === b ? a.offsetWidth : a.offsetHeight,\n        f = wa(a),\n        g = \"border-box\" === n.css(a, \"boxSizing\", !1, f);\n\n    if (0 >= e || null == e) {\n      if (e = xa(a, b, f), (0 > e || null == e) && (e = a.style[b]), va.test(e)) return e;\n      d = g && (k.boxSizingReliable() || e === a.style[b]), e = parseFloat(e) || 0;\n    }\n\n    return e + Ha(a, b, c || (g ? \"border\" : \"content\"), d, f) + \"px\";\n  }\n\n  function Ja(a, b) {\n    for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++) {\n      d = a[g], d.style && (f[g] = L.get(d, \"olddisplay\"), c = d.style.display, b ? (f[g] || \"none\" !== c || (d.style.display = \"\"), \"\" === d.style.display && S(d) && (f[g] = L.access(d, \"olddisplay\", ta(d.nodeName)))) : (e = S(d), \"none\" === c && e || L.set(d, \"olddisplay\", e ? c : n.css(d, \"display\"))));\n    }\n\n    for (g = 0; h > g; g++) {\n      d = a[g], d.style && (b && \"none\" !== d.style.display && \"\" !== d.style.display || (d.style.display = b ? f[g] || \"\" : \"none\"));\n    }\n\n    return a;\n  }\n\n  n.extend({\n    cssHooks: {\n      opacity: {\n        get: function get(a, b) {\n          if (b) {\n            var c = xa(a, \"opacity\");\n            return \"\" === c ? \"1\" : c;\n          }\n        }\n      }\n    },\n    cssNumber: {\n      columnCount: !0,\n      fillOpacity: !0,\n      flexGrow: !0,\n      flexShrink: !0,\n      fontWeight: !0,\n      lineHeight: !0,\n      opacity: !0,\n      order: !0,\n      orphans: !0,\n      widows: !0,\n      zIndex: !0,\n      zoom: !0\n    },\n    cssProps: {\n      \"float\": \"cssFloat\"\n    },\n    style: function style(a, b, c, d) {\n      if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {\n        var e,\n            f,\n            g,\n            h = n.camelCase(b),\n            i = a.style;\n        return b = n.cssProps[h] || (n.cssProps[h] = Fa(i, h)), g = n.cssHooks[b] || n.cssHooks[h], void 0 === c ? g && \"get\" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b] : (f = _typeof(c), \"string\" === f && (e = Ba.exec(c)) && (c = (e[1] + 1) * e[2] + parseFloat(n.css(a, b)), f = \"number\"), null != c && c === c && (\"number\" !== f || n.cssNumber[h] || (c += \"px\"), k.clearCloneStyle || \"\" !== c || 0 !== b.indexOf(\"background\") || (i[b] = \"inherit\"), g && \"set\" in g && void 0 === (c = g.set(a, c, d)) || (i[b] = c)), void 0);\n      }\n    },\n    css: function css(a, b, c, d) {\n      var e,\n          f,\n          g,\n          h = n.camelCase(b);\n      return b = n.cssProps[h] || (n.cssProps[h] = Fa(a.style, h)), g = n.cssHooks[b] || n.cssHooks[h], g && \"get\" in g && (e = g.get(a, !0, c)), void 0 === e && (e = xa(a, b, d)), \"normal\" === e && b in Da && (e = Da[b]), \"\" === c || c ? (f = parseFloat(e), c === !0 || n.isNumeric(f) ? f || 0 : e) : e;\n    }\n  }), n.each([\"height\", \"width\"], function (a, b) {\n    n.cssHooks[b] = {\n      get: function get(a, c, d) {\n        return c ? za.test(n.css(a, \"display\")) && 0 === a.offsetWidth ? n.swap(a, Ca, function () {\n          return Ia(a, b, d);\n        }) : Ia(a, b, d) : void 0;\n      },\n      set: function set(a, c, d) {\n        var e = d && wa(a);\n        return Ga(a, c, d ? Ha(a, b, d, \"border-box\" === n.css(a, \"boxSizing\", !1, e), e) : 0);\n      }\n    };\n  }), n.cssHooks.marginRight = ya(k.reliableMarginRight, function (a, b) {\n    return b ? n.swap(a, {\n      display: \"inline-block\"\n    }, xa, [a, \"marginRight\"]) : void 0;\n  }), n.each({\n    margin: \"\",\n    padding: \"\",\n    border: \"Width\"\n  }, function (a, b) {\n    n.cssHooks[a + b] = {\n      expand: function expand(c) {\n        for (var d = 0, e = {}, f = \"string\" == typeof c ? c.split(\" \") : [c]; 4 > d; d++) {\n          e[a + R[d] + b] = f[d] || f[d - 2] || f[0];\n        }\n\n        return e;\n      }\n    }, ua.test(a) || (n.cssHooks[a + b].set = Ga);\n  }), n.fn.extend({\n    css: function css(a, b) {\n      return J(this, function (a, b, c) {\n        var d,\n            e,\n            f = {},\n            g = 0;\n\n        if (n.isArray(b)) {\n          for (d = wa(a), e = b.length; e > g; g++) {\n            f[b[g]] = n.css(a, b[g], !1, d);\n          }\n\n          return f;\n        }\n\n        return void 0 !== c ? n.style(a, b, c) : n.css(a, b);\n      }, a, b, arguments.length > 1);\n    },\n    show: function show() {\n      return Ja(this, !0);\n    },\n    hide: function hide() {\n      return Ja(this);\n    },\n    toggle: function toggle(a) {\n      return \"boolean\" == typeof a ? a ? this.show() : this.hide() : this.each(function () {\n        S(this) ? n(this).show() : n(this).hide();\n      });\n    }\n  });\n\n  function Ka(a, b, c, d, e) {\n    return new Ka.prototype.init(a, b, c, d, e);\n  }\n\n  n.Tween = Ka, Ka.prototype = {\n    constructor: Ka,\n    init: function init(a, b, c, d, e, f) {\n      this.elem = a, this.prop = c, this.easing = e || \"swing\", this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (n.cssNumber[c] ? \"\" : \"px\");\n    },\n    cur: function cur() {\n      var a = Ka.propHooks[this.prop];\n      return a && a.get ? a.get(this) : Ka.propHooks._default.get(this);\n    },\n    run: function run(a) {\n      var b,\n          c = Ka.propHooks[this.prop];\n      return this.options.duration ? this.pos = b = n.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : this.pos = b = a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : Ka.propHooks._default.set(this), this;\n    }\n  }, Ka.prototype.init.prototype = Ka.prototype, Ka.propHooks = {\n    _default: {\n      get: function get(a) {\n        var b;\n        return null == a.elem[a.prop] || a.elem.style && null != a.elem.style[a.prop] ? (b = n.css(a.elem, a.prop, \"\"), b && \"auto\" !== b ? b : 0) : a.elem[a.prop];\n      },\n      set: function set(a) {\n        n.fx.step[a.prop] ? n.fx.step[a.prop](a) : a.elem.style && (null != a.elem.style[n.cssProps[a.prop]] || n.cssHooks[a.prop]) ? n.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now;\n      }\n    }\n  }, Ka.propHooks.scrollTop = Ka.propHooks.scrollLeft = {\n    set: function set(a) {\n      a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);\n    }\n  }, n.easing = {\n    linear: function linear(a) {\n      return a;\n    },\n    swing: function swing(a) {\n      return .5 - Math.cos(a * Math.PI) / 2;\n    }\n  }, n.fx = Ka.prototype.init, n.fx.step = {};\n  var La,\n      Ma,\n      Na = /^(?:toggle|show|hide)$/,\n      Oa = new RegExp(\"^(?:([+-])=|)(\" + Q + \")([a-z%]*)$\", \"i\"),\n      Pa = /queueHooks$/,\n      Qa = [Va],\n      Ra = {\n    \"*\": [function (a, b) {\n      var c = this.createTween(a, b),\n          d = c.cur(),\n          e = Oa.exec(b),\n          f = e && e[3] || (n.cssNumber[a] ? \"\" : \"px\"),\n          g = (n.cssNumber[a] || \"px\" !== f && +d) && Oa.exec(n.css(c.elem, a)),\n          h = 1,\n          i = 20;\n\n      if (g && g[3] !== f) {\n        f = f || g[3], e = e || [], g = +d || 1;\n\n        do {\n          h = h || \".5\", g /= h, n.style(c.elem, a, g + f);\n        } while (h !== (h = c.cur() / d) && 1 !== h && --i);\n      }\n\n      return e && (g = c.start = +g || +d || 0, c.unit = f, c.end = e[1] ? g + (e[1] + 1) * e[2] : +e[2]), c;\n    }]\n  };\n\n  function Sa() {\n    return setTimeout(function () {\n      La = void 0;\n    }), La = n.now();\n  }\n\n  function Ta(a, b) {\n    var c,\n        d = 0,\n        e = {\n      height: a\n    };\n\n    for (b = b ? 1 : 0; 4 > d; d += 2 - b) {\n      c = R[d], e[\"margin\" + c] = e[\"padding\" + c] = a;\n    }\n\n    return b && (e.opacity = e.width = a), e;\n  }\n\n  function Ua(a, b, c) {\n    for (var d, e = (Ra[b] || []).concat(Ra[\"*\"]), f = 0, g = e.length; g > f; f++) {\n      if (d = e[f].call(c, b, a)) return d;\n    }\n  }\n\n  function Va(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        j,\n        k,\n        l = this,\n        m = {},\n        o = a.style,\n        p = a.nodeType && S(a),\n        q = L.get(a, \"fxshow\");\n    c.queue || (h = n._queueHooks(a, \"fx\"), null == h.unqueued && (h.unqueued = 0, i = h.empty.fire, h.empty.fire = function () {\n      h.unqueued || i();\n    }), h.unqueued++, l.always(function () {\n      l.always(function () {\n        h.unqueued--, n.queue(a, \"fx\").length || h.empty.fire();\n      });\n    })), 1 === a.nodeType && (\"height\" in b || \"width\" in b) && (c.overflow = [o.overflow, o.overflowX, o.overflowY], j = n.css(a, \"display\"), k = \"none\" === j ? L.get(a, \"olddisplay\") || ta(a.nodeName) : j, \"inline\" === k && \"none\" === n.css(a, \"float\") && (o.display = \"inline-block\")), c.overflow && (o.overflow = \"hidden\", l.always(function () {\n      o.overflow = c.overflow[0], o.overflowX = c.overflow[1], o.overflowY = c.overflow[2];\n    }));\n\n    for (d in b) {\n      if (e = b[d], Na.exec(e)) {\n        if (delete b[d], f = f || \"toggle\" === e, e === (p ? \"hide\" : \"show\")) {\n          if (\"show\" !== e || !q || void 0 === q[d]) continue;\n          p = !0;\n        }\n\n        m[d] = q && q[d] || n.style(a, d);\n      } else j = void 0;\n    }\n\n    if (n.isEmptyObject(m)) \"inline\" === (\"none\" === j ? ta(a.nodeName) : j) && (o.display = j);else {\n      q ? \"hidden\" in q && (p = q.hidden) : q = L.access(a, \"fxshow\", {}), f && (q.hidden = !p), p ? n(a).show() : l.done(function () {\n        n(a).hide();\n      }), l.done(function () {\n        var b;\n        L.remove(a, \"fxshow\");\n\n        for (b in m) {\n          n.style(a, b, m[b]);\n        }\n      });\n\n      for (d in m) {\n        g = Ua(p ? q[d] : 0, d, l), d in q || (q[d] = g.start, p && (g.end = g.start, g.start = \"width\" === d || \"height\" === d ? 1 : 0));\n      }\n    }\n  }\n\n  function Wa(a, b) {\n    var c, d, e, f, g;\n\n    for (c in a) {\n      if (d = n.camelCase(c), e = b[d], f = a[c], n.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = n.cssHooks[d], g && \"expand\" in g) {\n        f = g.expand(f), delete a[d];\n\n        for (c in f) {\n          c in a || (a[c] = f[c], b[c] = e);\n        }\n      } else b[d] = e;\n    }\n  }\n\n  function Xa(a, b, c) {\n    var d,\n        e,\n        f = 0,\n        g = Qa.length,\n        h = n.Deferred().always(function () {\n      delete i.elem;\n    }),\n        i = function i() {\n      if (e) return !1;\n\n      for (var b = La || Sa(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; i > g; g++) {\n        j.tweens[g].run(f);\n      }\n\n      return h.notifyWith(a, [j, f, c]), 1 > f && i ? c : (h.resolveWith(a, [j]), !1);\n    },\n        j = h.promise({\n      elem: a,\n      props: n.extend({}, b),\n      opts: n.extend(!0, {\n        specialEasing: {}\n      }, c),\n      originalProperties: b,\n      originalOptions: c,\n      startTime: La || Sa(),\n      duration: c.duration,\n      tweens: [],\n      createTween: function createTween(b, c) {\n        var d = n.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);\n        return j.tweens.push(d), d;\n      },\n      stop: function stop(b) {\n        var c = 0,\n            d = b ? j.tweens.length : 0;\n        if (e) return this;\n\n        for (e = !0; d > c; c++) {\n          j.tweens[c].run(1);\n        }\n\n        return b ? h.resolveWith(a, [j, b]) : h.rejectWith(a, [j, b]), this;\n      }\n    }),\n        k = j.props;\n\n    for (Wa(k, j.opts.specialEasing); g > f; f++) {\n      if (d = Qa[f].call(j, a, k, j.opts)) return d;\n    }\n\n    return n.map(k, Ua, j), n.isFunction(j.opts.start) && j.opts.start.call(a, j), n.fx.timer(n.extend(i, {\n      elem: a,\n      anim: j,\n      queue: j.opts.queue\n    })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always);\n  }\n\n  n.Animation = n.extend(Xa, {\n    tweener: function tweener(a, b) {\n      n.isFunction(a) ? (b = a, a = [\"*\"]) : a = a.split(\" \");\n\n      for (var c, d = 0, e = a.length; e > d; d++) {\n        c = a[d], Ra[c] = Ra[c] || [], Ra[c].unshift(b);\n      }\n    },\n    prefilter: function prefilter(a, b) {\n      b ? Qa.unshift(a) : Qa.push(a);\n    }\n  }), n.speed = function (a, b, c) {\n    var d = a && \"object\" == _typeof(a) ? n.extend({}, a) : {\n      complete: c || !c && b || n.isFunction(a) && a,\n      duration: a,\n      easing: c && b || b && !n.isFunction(b) && b\n    };\n    return d.duration = n.fx.off ? 0 : \"number\" == typeof d.duration ? d.duration : d.duration in n.fx.speeds ? n.fx.speeds[d.duration] : n.fx.speeds._default, (null == d.queue || d.queue === !0) && (d.queue = \"fx\"), d.old = d.complete, d.complete = function () {\n      n.isFunction(d.old) && d.old.call(this), d.queue && n.dequeue(this, d.queue);\n    }, d;\n  }, n.fn.extend({\n    fadeTo: function fadeTo(a, b, c, d) {\n      return this.filter(S).css(\"opacity\", 0).show().end().animate({\n        opacity: b\n      }, a, c, d);\n    },\n    animate: function animate(a, b, c, d) {\n      var e = n.isEmptyObject(a),\n          f = n.speed(b, c, d),\n          g = function g() {\n        var b = Xa(this, n.extend({}, a), f);\n        (e || L.get(this, \"finish\")) && b.stop(!0);\n      };\n\n      return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);\n    },\n    stop: function stop(a, b, c) {\n      var d = function d(a) {\n        var b = a.stop;\n        delete a.stop, b(c);\n      };\n\n      return \"string\" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || \"fx\", []), this.each(function () {\n        var b = !0,\n            e = null != a && a + \"queueHooks\",\n            f = n.timers,\n            g = L.get(this);\n        if (e) g[e] && g[e].stop && d(g[e]);else for (e in g) {\n          g[e] && g[e].stop && Pa.test(e) && d(g[e]);\n        }\n\n        for (e = f.length; e--;) {\n          f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));\n        }\n\n        (b || !c) && n.dequeue(this, a);\n      });\n    },\n    finish: function finish(a) {\n      return a !== !1 && (a = a || \"fx\"), this.each(function () {\n        var b,\n            c = L.get(this),\n            d = c[a + \"queue\"],\n            e = c[a + \"queueHooks\"],\n            f = n.timers,\n            g = d ? d.length : 0;\n\n        for (c.finish = !0, n.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;) {\n          f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));\n        }\n\n        for (b = 0; g > b; b++) {\n          d[b] && d[b].finish && d[b].finish.call(this);\n        }\n\n        delete c.finish;\n      });\n    }\n  }), n.each([\"toggle\", \"show\", \"hide\"], function (a, b) {\n    var c = n.fn[b];\n\n    n.fn[b] = function (a, d, e) {\n      return null == a || \"boolean\" == typeof a ? c.apply(this, arguments) : this.animate(Ta(b, !0), a, d, e);\n    };\n  }), n.each({\n    slideDown: Ta(\"show\"),\n    slideUp: Ta(\"hide\"),\n    slideToggle: Ta(\"toggle\"),\n    fadeIn: {\n      opacity: \"show\"\n    },\n    fadeOut: {\n      opacity: \"hide\"\n    },\n    fadeToggle: {\n      opacity: \"toggle\"\n    }\n  }, function (a, b) {\n    n.fn[a] = function (a, c, d) {\n      return this.animate(b, a, c, d);\n    };\n  }), n.timers = [], n.fx.tick = function () {\n    var a,\n        b = 0,\n        c = n.timers;\n\n    for (La = n.now(); b < c.length; b++) {\n      a = c[b], a() || c[b] !== a || c.splice(b--, 1);\n    }\n\n    c.length || n.fx.stop(), La = void 0;\n  }, n.fx.timer = function (a) {\n    n.timers.push(a), a() ? n.fx.start() : n.timers.pop();\n  }, n.fx.interval = 13, n.fx.start = function () {\n    Ma || (Ma = setInterval(n.fx.tick, n.fx.interval));\n  }, n.fx.stop = function () {\n    clearInterval(Ma), Ma = null;\n  }, n.fx.speeds = {\n    slow: 600,\n    fast: 200,\n    _default: 400\n  }, n.fn.delay = function (a, b) {\n    return a = n.fx ? n.fx.speeds[a] || a : a, b = b || \"fx\", this.queue(b, function (b, c) {\n      var d = setTimeout(b, a);\n\n      c.stop = function () {\n        clearTimeout(d);\n      };\n    });\n  }, function () {\n    var a = l.createElement(\"input\"),\n        b = l.createElement(\"select\"),\n        c = b.appendChild(l.createElement(\"option\"));\n    a.type = \"checkbox\", k.checkOn = \"\" !== a.value, k.optSelected = c.selected, b.disabled = !0, k.optDisabled = !c.disabled, a = l.createElement(\"input\"), a.value = \"t\", a.type = \"radio\", k.radioValue = \"t\" === a.value;\n  }();\n  var Ya,\n      Za,\n      $a = n.expr.attrHandle;\n  n.fn.extend({\n    attr: function attr(a, b) {\n      return J(this, n.attr, a, b, arguments.length > 1);\n    },\n    removeAttr: function removeAttr(a) {\n      return this.each(function () {\n        n.removeAttr(this, a);\n      });\n    }\n  }), n.extend({\n    attr: function attr(a, b, c) {\n      var d,\n          e,\n          f = a.nodeType;\n      if (a && 3 !== f && 8 !== f && 2 !== f) return _typeof(a.getAttribute) === U ? n.prop(a, b, c) : (1 === f && n.isXMLDoc(a) || (b = b.toLowerCase(), d = n.attrHooks[b] || (n.expr.match.bool.test(b) ? Za : Ya)), void 0 === c ? d && \"get\" in d && null !== (e = d.get(a, b)) ? e : (e = n.find.attr(a, b), null == e ? void 0 : e) : null !== c ? d && \"set\" in d && void 0 !== (e = d.set(a, c, b)) ? e : (a.setAttribute(b, c + \"\"), c) : void n.removeAttr(a, b));\n    },\n    removeAttr: function removeAttr(a, b) {\n      var c,\n          d,\n          e = 0,\n          f = b && b.match(E);\n      if (f && 1 === a.nodeType) while (c = f[e++]) {\n        d = n.propFix[c] || c, n.expr.match.bool.test(c) && (a[d] = !1), a.removeAttribute(c);\n      }\n    },\n    attrHooks: {\n      type: {\n        set: function set(a, b) {\n          if (!k.radioValue && \"radio\" === b && n.nodeName(a, \"input\")) {\n            var c = a.value;\n            return a.setAttribute(\"type\", b), c && (a.value = c), b;\n          }\n        }\n      }\n    }\n  }), Za = {\n    set: function set(a, b, c) {\n      return b === !1 ? n.removeAttr(a, c) : a.setAttribute(c, c), c;\n    }\n  }, n.each(n.expr.match.bool.source.match(/\\w+/g), function (a, b) {\n    var c = $a[b] || n.find.attr;\n\n    $a[b] = function (a, b, d) {\n      var e, f;\n      return d || (f = $a[b], $a[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, $a[b] = f), e;\n    };\n  });\n  var _a = /^(?:input|select|textarea|button)$/i;\n  n.fn.extend({\n    prop: function prop(a, b) {\n      return J(this, n.prop, a, b, arguments.length > 1);\n    },\n    removeProp: function removeProp(a) {\n      return this.each(function () {\n        delete this[n.propFix[a] || a];\n      });\n    }\n  }), n.extend({\n    propFix: {\n      \"for\": \"htmlFor\",\n      \"class\": \"className\"\n    },\n    prop: function prop(a, b, c) {\n      var d,\n          e,\n          f,\n          g = a.nodeType;\n      if (a && 3 !== g && 8 !== g && 2 !== g) return f = 1 !== g || !n.isXMLDoc(a), f && (b = n.propFix[b] || b, e = n.propHooks[b]), void 0 !== c ? e && \"set\" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && \"get\" in e && null !== (d = e.get(a, b)) ? d : a[b];\n    },\n    propHooks: {\n      tabIndex: {\n        get: function get(a) {\n          return a.hasAttribute(\"tabindex\") || _a.test(a.nodeName) || a.href ? a.tabIndex : -1;\n        }\n      }\n    }\n  }), k.optSelected || (n.propHooks.selected = {\n    get: function get(a) {\n      var b = a.parentNode;\n      return b && b.parentNode && b.parentNode.selectedIndex, null;\n    }\n  }), n.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n    n.propFix[this.toLowerCase()] = this;\n  });\n  var ab = /[\\t\\r\\n\\f]/g;\n  n.fn.extend({\n    addClass: function addClass(a) {\n      var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h = \"string\" == typeof a && a,\n          i = 0,\n          j = this.length;\n      if (n.isFunction(a)) return this.each(function (b) {\n        n(this).addClass(a.call(this, b, this.className));\n      });\n      if (h) for (b = (a || \"\").match(E) || []; j > i; i++) {\n        if (c = this[i], d = 1 === c.nodeType && (c.className ? (\" \" + c.className + \" \").replace(ab, \" \") : \" \")) {\n          f = 0;\n\n          while (e = b[f++]) {\n            d.indexOf(\" \" + e + \" \") < 0 && (d += e + \" \");\n          }\n\n          g = n.trim(d), c.className !== g && (c.className = g);\n        }\n      }\n      return this;\n    },\n    removeClass: function removeClass(a) {\n      var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h = 0 === arguments.length || \"string\" == typeof a && a,\n          i = 0,\n          j = this.length;\n      if (n.isFunction(a)) return this.each(function (b) {\n        n(this).removeClass(a.call(this, b, this.className));\n      });\n      if (h) for (b = (a || \"\").match(E) || []; j > i; i++) {\n        if (c = this[i], d = 1 === c.nodeType && (c.className ? (\" \" + c.className + \" \").replace(ab, \" \") : \"\")) {\n          f = 0;\n\n          while (e = b[f++]) {\n            while (d.indexOf(\" \" + e + \" \") >= 0) {\n              d = d.replace(\" \" + e + \" \", \" \");\n            }\n          }\n\n          g = a ? n.trim(d) : \"\", c.className !== g && (c.className = g);\n        }\n      }\n      return this;\n    },\n    toggleClass: function toggleClass(a, b) {\n      var c = _typeof(a);\n\n      return \"boolean\" == typeof b && \"string\" === c ? b ? this.addClass(a) : this.removeClass(a) : this.each(n.isFunction(a) ? function (c) {\n        n(this).toggleClass(a.call(this, c, this.className, b), b);\n      } : function () {\n        if (\"string\" === c) {\n          var b,\n              d = 0,\n              e = n(this),\n              f = a.match(E) || [];\n\n          while (b = f[d++]) {\n            e.hasClass(b) ? e.removeClass(b) : e.addClass(b);\n          }\n        } else (c === U || \"boolean\" === c) && (this.className && L.set(this, \"__className__\", this.className), this.className = this.className || a === !1 ? \"\" : L.get(this, \"__className__\") || \"\");\n      });\n    },\n    hasClass: function hasClass(a) {\n      for (var b = \" \" + a + \" \", c = 0, d = this.length; d > c; c++) {\n        if (1 === this[c].nodeType && (\" \" + this[c].className + \" \").replace(ab, \" \").indexOf(b) >= 0) return !0;\n      }\n\n      return !1;\n    }\n  });\n  var bb = /\\r/g;\n  n.fn.extend({\n    val: function val(a) {\n      var b,\n          c,\n          d,\n          e = this[0];\n      {\n        if (arguments.length) return d = n.isFunction(a), this.each(function (c) {\n          var e;\n          1 === this.nodeType && (e = d ? a.call(this, c, n(this).val()) : a, null == e ? e = \"\" : \"number\" == typeof e ? e += \"\" : n.isArray(e) && (e = n.map(e, function (a) {\n            return null == a ? \"\" : a + \"\";\n          })), b = n.valHooks[this.type] || n.valHooks[this.nodeName.toLowerCase()], b && \"set\" in b && void 0 !== b.set(this, e, \"value\") || (this.value = e));\n        });\n        if (e) return b = n.valHooks[e.type] || n.valHooks[e.nodeName.toLowerCase()], b && \"get\" in b && void 0 !== (c = b.get(e, \"value\")) ? c : (c = e.value, \"string\" == typeof c ? c.replace(bb, \"\") : null == c ? \"\" : c);\n      }\n    }\n  }), n.extend({\n    valHooks: {\n      option: {\n        get: function get(a) {\n          var b = n.find.attr(a, \"value\");\n          return null != b ? b : n.trim(n.text(a));\n        }\n      },\n      select: {\n        get: function get(a) {\n          for (var b, c, d = a.options, e = a.selectedIndex, f = \"select-one\" === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++) {\n            if (c = d[i], !(!c.selected && i !== e || (k.optDisabled ? c.disabled : null !== c.getAttribute(\"disabled\")) || c.parentNode.disabled && n.nodeName(c.parentNode, \"optgroup\"))) {\n              if (b = n(c).val(), f) return b;\n              g.push(b);\n            }\n          }\n\n          return g;\n        },\n        set: function set(a, b) {\n          var c,\n              d,\n              e = a.options,\n              f = n.makeArray(b),\n              g = e.length;\n\n          while (g--) {\n            d = e[g], (d.selected = n.inArray(d.value, f) >= 0) && (c = !0);\n          }\n\n          return c || (a.selectedIndex = -1), f;\n        }\n      }\n    }\n  }), n.each([\"radio\", \"checkbox\"], function () {\n    n.valHooks[this] = {\n      set: function set(a, b) {\n        return n.isArray(b) ? a.checked = n.inArray(n(a).val(), b) >= 0 : void 0;\n      }\n    }, k.checkOn || (n.valHooks[this].get = function (a) {\n      return null === a.getAttribute(\"value\") ? \"on\" : a.value;\n    });\n  }), n.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu\".split(\" \"), function (a, b) {\n    n.fn[b] = function (a, c) {\n      return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);\n    };\n  }), n.fn.extend({\n    hover: function hover(a, b) {\n      return this.mouseenter(a).mouseleave(b || a);\n    },\n    bind: function bind(a, b, c) {\n      return this.on(a, null, b, c);\n    },\n    unbind: function unbind(a, b) {\n      return this.off(a, null, b);\n    },\n    delegate: function delegate(a, b, c, d) {\n      return this.on(b, a, c, d);\n    },\n    undelegate: function undelegate(a, b, c) {\n      return 1 === arguments.length ? this.off(a, \"**\") : this.off(b, a || \"**\", c);\n    }\n  });\n  var cb = n.now(),\n      db = /\\?/;\n  n.parseJSON = function (a) {\n    return JSON.parse(a + \"\");\n  }, n.parseXML = function (a) {\n    var b, c;\n    if (!a || \"string\" != typeof a) return null;\n\n    try {\n      c = new DOMParser(), b = c.parseFromString(a, \"text/xml\");\n    } catch (d) {\n      b = void 0;\n    }\n\n    return (!b || b.getElementsByTagName(\"parsererror\").length) && n.error(\"Invalid XML: \" + a), b;\n  };\n  var eb = /#.*$/,\n      fb = /([?&])_=[^&]*/,\n      gb = /^(.*?):[ \\t]*([^\\r\\n]*)$/gm,\n      hb = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n      ib = /^(?:GET|HEAD)$/,\n      jb = /^\\/\\//,\n      kb = /^([\\w.+-]+:)(?:\\/\\/(?:[^\\/?#]*@|)([^\\/?#:]*)(?::(\\d+)|)|)/,\n      lb = {},\n      mb = {},\n      nb = \"*/\".concat(\"*\"),\n      ob = a.location.href,\n      pb = kb.exec(ob.toLowerCase()) || [];\n\n  function qb(a) {\n    return function (b, c) {\n      \"string\" != typeof b && (c = b, b = \"*\");\n      var d,\n          e = 0,\n          f = b.toLowerCase().match(E) || [];\n      if (n.isFunction(c)) while (d = f[e++]) {\n        \"+\" === d[0] ? (d = d.slice(1) || \"*\", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);\n      }\n    };\n  }\n\n  function rb(a, b, c, d) {\n    var e = {},\n        f = a === mb;\n\n    function g(h) {\n      var i;\n      return e[h] = !0, n.each(a[h] || [], function (a, h) {\n        var j = h(b, c, d);\n        return \"string\" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1);\n      }), i;\n    }\n\n    return g(b.dataTypes[0]) || !e[\"*\"] && g(\"*\");\n  }\n\n  function sb(a, b) {\n    var c,\n        d,\n        e = n.ajaxSettings.flatOptions || {};\n\n    for (c in b) {\n      void 0 !== b[c] && ((e[c] ? a : d || (d = {}))[c] = b[c]);\n    }\n\n    return d && n.extend(!0, a, d), a;\n  }\n\n  function tb(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h = a.contents,\n        i = a.dataTypes;\n\n    while (\"*\" === i[0]) {\n      i.shift(), void 0 === d && (d = a.mimeType || b.getResponseHeader(\"Content-Type\"));\n    }\n\n    if (d) for (e in h) {\n      if (h[e] && h[e].test(d)) {\n        i.unshift(e);\n        break;\n      }\n    }\n    if (i[0] in c) f = i[0];else {\n      for (e in c) {\n        if (!i[0] || a.converters[e + \" \" + i[0]]) {\n          f = e;\n          break;\n        }\n\n        g || (g = e);\n      }\n\n      f = f || g;\n    }\n    return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0;\n  }\n\n  function ub(a, b, c, d) {\n    var e,\n        f,\n        g,\n        h,\n        i,\n        j = {},\n        k = a.dataTypes.slice();\n    if (k[1]) for (g in a.converters) {\n      j[g.toLowerCase()] = a.converters[g];\n    }\n    f = k.shift();\n\n    while (f) {\n      if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift()) if (\"*\" === f) f = i;else if (\"*\" !== i && i !== f) {\n        if (g = j[i + \" \" + f] || j[\"* \" + f], !g) for (e in j) {\n          if (h = e.split(\" \"), h[1] === f && (g = j[i + \" \" + h[0]] || j[\"* \" + h[0]])) {\n            g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));\n            break;\n          }\n        }\n        if (g !== !0) if (g && a[\"throws\"]) b = g(b);else try {\n          b = g(b);\n        } catch (l) {\n          return {\n            state: \"parsererror\",\n            error: g ? l : \"No conversion from \" + i + \" to \" + f\n          };\n        }\n      }\n    }\n\n    return {\n      state: \"success\",\n      data: b\n    };\n  }\n\n  n.extend({\n    active: 0,\n    lastModified: {},\n    etag: {},\n    ajaxSettings: {\n      url: ob,\n      type: \"GET\",\n      isLocal: hb.test(pb[1]),\n      global: !0,\n      processData: !0,\n      async: !0,\n      contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n      accepts: {\n        \"*\": nb,\n        text: \"text/plain\",\n        html: \"text/html\",\n        xml: \"application/xml, text/xml\",\n        json: \"application/json, text/javascript\"\n      },\n      contents: {\n        xml: /xml/,\n        html: /html/,\n        json: /json/\n      },\n      responseFields: {\n        xml: \"responseXML\",\n        text: \"responseText\",\n        json: \"responseJSON\"\n      },\n      converters: {\n        \"* text\": String,\n        \"text html\": !0,\n        \"text json\": n.parseJSON,\n        \"text xml\": n.parseXML\n      },\n      flatOptions: {\n        url: !0,\n        context: !0\n      }\n    },\n    ajaxSetup: function ajaxSetup(a, b) {\n      return b ? sb(sb(a, n.ajaxSettings), b) : sb(n.ajaxSettings, a);\n    },\n    ajaxPrefilter: qb(lb),\n    ajaxTransport: qb(mb),\n    ajax: function ajax(a, b) {\n      \"object\" == _typeof(a) && (b = a, a = void 0), b = b || {};\n      var c,\n          d,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k = n.ajaxSetup({}, b),\n          l = k.context || k,\n          m = k.context && (l.nodeType || l.jquery) ? n(l) : n.event,\n          o = n.Deferred(),\n          p = n.Callbacks(\"once memory\"),\n          q = k.statusCode || {},\n          r = {},\n          s = {},\n          t = 0,\n          u = \"canceled\",\n          v = {\n        readyState: 0,\n        getResponseHeader: function getResponseHeader(a) {\n          var b;\n\n          if (2 === t) {\n            if (!f) {\n              f = {};\n\n              while (b = gb.exec(e)) {\n                f[b[1].toLowerCase()] = b[2];\n              }\n            }\n\n            b = f[a.toLowerCase()];\n          }\n\n          return null == b ? null : b;\n        },\n        getAllResponseHeaders: function getAllResponseHeaders() {\n          return 2 === t ? e : null;\n        },\n        setRequestHeader: function setRequestHeader(a, b) {\n          var c = a.toLowerCase();\n          return t || (a = s[c] = s[c] || a, r[a] = b), this;\n        },\n        overrideMimeType: function overrideMimeType(a) {\n          return t || (k.mimeType = a), this;\n        },\n        statusCode: function statusCode(a) {\n          var b;\n          if (a) if (2 > t) for (b in a) {\n            q[b] = [q[b], a[b]];\n          } else v.always(a[v.status]);\n          return this;\n        },\n        abort: function abort(a) {\n          var b = a || u;\n          return c && c.abort(b), x(0, b), this;\n        }\n      };\n      if (o.promise(v).complete = p.add, v.success = v.done, v.error = v.fail, k.url = ((a || k.url || ob) + \"\").replace(eb, \"\").replace(jb, pb[1] + \"//\"), k.type = b.method || b.type || k.method || k.type, k.dataTypes = n.trim(k.dataType || \"*\").toLowerCase().match(E) || [\"\"], null == k.crossDomain && (h = kb.exec(k.url.toLowerCase()), k.crossDomain = !(!h || h[1] === pb[1] && h[2] === pb[2] && (h[3] || (\"http:\" === h[1] ? \"80\" : \"443\")) === (pb[3] || (\"http:\" === pb[1] ? \"80\" : \"443\")))), k.data && k.processData && \"string\" != typeof k.data && (k.data = n.param(k.data, k.traditional)), rb(lb, k, b, v), 2 === t) return v;\n      i = n.event && k.global, i && 0 === n.active++ && n.event.trigger(\"ajaxStart\"), k.type = k.type.toUpperCase(), k.hasContent = !ib.test(k.type), d = k.url, k.hasContent || (k.data && (d = k.url += (db.test(d) ? \"&\" : \"?\") + k.data, delete k.data), k.cache === !1 && (k.url = fb.test(d) ? d.replace(fb, \"$1_=\" + cb++) : d + (db.test(d) ? \"&\" : \"?\") + \"_=\" + cb++)), k.ifModified && (n.lastModified[d] && v.setRequestHeader(\"If-Modified-Since\", n.lastModified[d]), n.etag[d] && v.setRequestHeader(\"If-None-Match\", n.etag[d])), (k.data && k.hasContent && k.contentType !== !1 || b.contentType) && v.setRequestHeader(\"Content-Type\", k.contentType), v.setRequestHeader(\"Accept\", k.dataTypes[0] && k.accepts[k.dataTypes[0]] ? k.accepts[k.dataTypes[0]] + (\"*\" !== k.dataTypes[0] ? \", \" + nb + \"; q=0.01\" : \"\") : k.accepts[\"*\"]);\n\n      for (j in k.headers) {\n        v.setRequestHeader(j, k.headers[j]);\n      }\n\n      if (k.beforeSend && (k.beforeSend.call(l, v, k) === !1 || 2 === t)) return v.abort();\n      u = \"abort\";\n\n      for (j in {\n        success: 1,\n        error: 1,\n        complete: 1\n      }) {\n        v[j](k[j]);\n      }\n\n      if (c = rb(mb, k, b, v)) {\n        v.readyState = 1, i && m.trigger(\"ajaxSend\", [v, k]), k.async && k.timeout > 0 && (g = setTimeout(function () {\n          v.abort(\"timeout\");\n        }, k.timeout));\n\n        try {\n          t = 1, c.send(r, x);\n        } catch (w) {\n          if (!(2 > t)) throw w;\n          x(-1, w);\n        }\n      } else x(-1, \"No Transport\");\n\n      function x(a, b, f, h) {\n        var j,\n            r,\n            s,\n            u,\n            w,\n            x = b;\n        2 !== t && (t = 2, g && clearTimeout(g), c = void 0, e = h || \"\", v.readyState = a > 0 ? 4 : 0, j = a >= 200 && 300 > a || 304 === a, f && (u = tb(k, v, f)), u = ub(k, u, v, j), j ? (k.ifModified && (w = v.getResponseHeader(\"Last-Modified\"), w && (n.lastModified[d] = w), w = v.getResponseHeader(\"etag\"), w && (n.etag[d] = w)), 204 === a || \"HEAD\" === k.type ? x = \"nocontent\" : 304 === a ? x = \"notmodified\" : (x = u.state, r = u.data, s = u.error, j = !s)) : (s = x, (a || !x) && (x = \"error\", 0 > a && (a = 0))), v.status = a, v.statusText = (b || x) + \"\", j ? o.resolveWith(l, [r, x, v]) : o.rejectWith(l, [v, x, s]), v.statusCode(q), q = void 0, i && m.trigger(j ? \"ajaxSuccess\" : \"ajaxError\", [v, k, j ? r : s]), p.fireWith(l, [v, x]), i && (m.trigger(\"ajaxComplete\", [v, k]), --n.active || n.event.trigger(\"ajaxStop\")));\n      }\n\n      return v;\n    },\n    getJSON: function getJSON(a, b, c) {\n      return n.get(a, b, c, \"json\");\n    },\n    getScript: function getScript(a, b) {\n      return n.get(a, void 0, b, \"script\");\n    }\n  }), n.each([\"get\", \"post\"], function (a, b) {\n    n[b] = function (a, c, d, e) {\n      return n.isFunction(c) && (e = e || d, d = c, c = void 0), n.ajax({\n        url: a,\n        type: b,\n        dataType: e,\n        data: c,\n        success: d\n      });\n    };\n  }), n._evalUrl = function (a) {\n    return n.ajax({\n      url: a,\n      type: \"GET\",\n      dataType: \"script\",\n      async: !1,\n      global: !1,\n      \"throws\": !0\n    });\n  }, n.fn.extend({\n    wrapAll: function wrapAll(a) {\n      var b;\n      return n.isFunction(a) ? this.each(function (b) {\n        n(this).wrapAll(a.call(this, b));\n      }) : (this[0] && (b = n(a, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && b.insertBefore(this[0]), b.map(function () {\n        var a = this;\n\n        while (a.firstElementChild) {\n          a = a.firstElementChild;\n        }\n\n        return a;\n      }).append(this)), this);\n    },\n    wrapInner: function wrapInner(a) {\n      return this.each(n.isFunction(a) ? function (b) {\n        n(this).wrapInner(a.call(this, b));\n      } : function () {\n        var b = n(this),\n            c = b.contents();\n        c.length ? c.wrapAll(a) : b.append(a);\n      });\n    },\n    wrap: function wrap(a) {\n      var b = n.isFunction(a);\n      return this.each(function (c) {\n        n(this).wrapAll(b ? a.call(this, c) : a);\n      });\n    },\n    unwrap: function unwrap() {\n      return this.parent().each(function () {\n        n.nodeName(this, \"body\") || n(this).replaceWith(this.childNodes);\n      }).end();\n    }\n  }), n.expr.filters.hidden = function (a) {\n    return a.offsetWidth <= 0 && a.offsetHeight <= 0;\n  }, n.expr.filters.visible = function (a) {\n    return !n.expr.filters.hidden(a);\n  };\n  var vb = /%20/g,\n      wb = /\\[\\]$/,\n      xb = /\\r?\\n/g,\n      yb = /^(?:submit|button|image|reset|file)$/i,\n      zb = /^(?:input|select|textarea|keygen)/i;\n\n  function Ab(a, b, c, d) {\n    var e;\n    if (n.isArray(b)) n.each(b, function (b, e) {\n      c || wb.test(a) ? d(a, e) : Ab(a + \"[\" + (\"object\" == _typeof(e) ? b : \"\") + \"]\", e, c, d);\n    });else if (c || \"object\" !== n.type(b)) d(a, b);else for (e in b) {\n      Ab(a + \"[\" + e + \"]\", b[e], c, d);\n    }\n  }\n\n  n.param = function (a, b) {\n    var c,\n        d = [],\n        e = function e(a, b) {\n      b = n.isFunction(b) ? b() : null == b ? \"\" : b, d[d.length] = encodeURIComponent(a) + \"=\" + encodeURIComponent(b);\n    };\n\n    if (void 0 === b && (b = n.ajaxSettings && n.ajaxSettings.traditional), n.isArray(a) || a.jquery && !n.isPlainObject(a)) n.each(a, function () {\n      e(this.name, this.value);\n    });else for (c in a) {\n      Ab(c, a[c], b, e);\n    }\n    return d.join(\"&\").replace(vb, \"+\");\n  }, n.fn.extend({\n    serialize: function serialize() {\n      return n.param(this.serializeArray());\n    },\n    serializeArray: function serializeArray() {\n      return this.map(function () {\n        var a = n.prop(this, \"elements\");\n        return a ? n.makeArray(a) : this;\n      }).filter(function () {\n        var a = this.type;\n        return this.name && !n(this).is(\":disabled\") && zb.test(this.nodeName) && !yb.test(a) && (this.checked || !T.test(a));\n      }).map(function (a, b) {\n        var c = n(this).val();\n        return null == c ? null : n.isArray(c) ? n.map(c, function (a) {\n          return {\n            name: b.name,\n            value: a.replace(xb, \"\\r\\n\")\n          };\n        }) : {\n          name: b.name,\n          value: c.replace(xb, \"\\r\\n\")\n        };\n      }).get();\n    }\n  }), n.ajaxSettings.xhr = function () {\n    try {\n      return new XMLHttpRequest();\n    } catch (a) {}\n  };\n  var Bb = 0,\n      Cb = {},\n      Db = {\n    0: 200,\n    1223: 204\n  },\n      Eb = n.ajaxSettings.xhr();\n  a.attachEvent && a.attachEvent(\"onunload\", function () {\n    for (var a in Cb) {\n      Cb[a]();\n    }\n  }), k.cors = !!Eb && \"withCredentials\" in Eb, k.ajax = Eb = !!Eb, n.ajaxTransport(function (a) {\n    var _b2;\n\n    return k.cors || Eb && !a.crossDomain ? {\n      send: function send(c, d) {\n        var e,\n            f = a.xhr(),\n            g = ++Bb;\n        if (f.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields) for (e in a.xhrFields) {\n          f[e] = a.xhrFields[e];\n        }\n        a.mimeType && f.overrideMimeType && f.overrideMimeType(a.mimeType), a.crossDomain || c[\"X-Requested-With\"] || (c[\"X-Requested-With\"] = \"XMLHttpRequest\");\n\n        for (e in c) {\n          f.setRequestHeader(e, c[e]);\n        }\n\n        _b2 = function b(a) {\n          return function () {\n            _b2 && (delete Cb[g], _b2 = f.onload = f.onerror = null, \"abort\" === a ? f.abort() : \"error\" === a ? d(f.status, f.statusText) : d(Db[f.status] || f.status, f.statusText, \"string\" == typeof f.responseText ? {\n              text: f.responseText\n            } : void 0, f.getAllResponseHeaders()));\n          };\n        }, f.onload = _b2(), f.onerror = _b2(\"error\"), _b2 = Cb[g] = _b2(\"abort\");\n\n        try {\n          f.send(a.hasContent && a.data || null);\n        } catch (h) {\n          if (_b2) throw h;\n        }\n      },\n      abort: function abort() {\n        _b2 && _b2();\n      }\n    } : void 0;\n  }), n.ajaxSetup({\n    accepts: {\n      script: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\n    },\n    contents: {\n      script: /(?:java|ecma)script/\n    },\n    converters: {\n      \"text script\": function textScript(a) {\n        return n.globalEval(a), a;\n      }\n    }\n  }), n.ajaxPrefilter(\"script\", function (a) {\n    void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = \"GET\");\n  }), n.ajaxTransport(\"script\", function (a) {\n    if (a.crossDomain) {\n      var b, _c;\n\n      return {\n        send: function send(d, e) {\n          b = n(\"<script>\").prop({\n            async: !0,\n            charset: a.scriptCharset,\n            src: a.url\n          }).on(\"load error\", _c = function c(a) {\n            b.remove(), _c = null, a && e(\"error\" === a.type ? 404 : 200, a.type);\n          }), l.head.appendChild(b[0]);\n        },\n        abort: function abort() {\n          _c && _c();\n        }\n      };\n    }\n  });\n  var Fb = [],\n      Gb = /(=)\\?(?=&|$)|\\?\\?/;\n  n.ajaxSetup({\n    jsonp: \"callback\",\n    jsonpCallback: function jsonpCallback() {\n      var a = Fb.pop() || n.expando + \"_\" + cb++;\n      return this[a] = !0, a;\n    }\n  }), n.ajaxPrefilter(\"json jsonp\", function (b, c, d) {\n    var e,\n        f,\n        g,\n        h = b.jsonp !== !1 && (Gb.test(b.url) ? \"url\" : \"string\" == typeof b.data && !(b.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && Gb.test(b.data) && \"data\");\n    return h || \"jsonp\" === b.dataTypes[0] ? (e = b.jsonpCallback = n.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(Gb, \"$1\" + e) : b.jsonp !== !1 && (b.url += (db.test(b.url) ? \"&\" : \"?\") + b.jsonp + \"=\" + e), b.converters[\"script json\"] = function () {\n      return g || n.error(e + \" was not called\"), g[0];\n    }, b.dataTypes[0] = \"json\", f = a[e], a[e] = function () {\n      g = arguments;\n    }, d.always(function () {\n      a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, Fb.push(e)), g && n.isFunction(f) && f(g[0]), g = f = void 0;\n    }), \"script\") : void 0;\n  }), n.parseHTML = function (a, b, c) {\n    if (!a || \"string\" != typeof a) return null;\n    \"boolean\" == typeof b && (c = b, b = !1), b = b || l;\n    var d = v.exec(a),\n        e = !c && [];\n    return d ? [b.createElement(d[1])] : (d = n.buildFragment([a], b, e), e && e.length && n(e).remove(), n.merge([], d.childNodes));\n  };\n  var Hb = n.fn.load;\n  n.fn.load = function (a, b, c) {\n    if (\"string\" != typeof a && Hb) return Hb.apply(this, arguments);\n    var d,\n        e,\n        f,\n        g = this,\n        h = a.indexOf(\" \");\n    return h >= 0 && (d = n.trim(a.slice(h)), a = a.slice(0, h)), n.isFunction(b) ? (c = b, b = void 0) : b && \"object\" == _typeof(b) && (e = \"POST\"), g.length > 0 && n.ajax({\n      url: a,\n      type: e,\n      dataType: \"html\",\n      data: b\n    }).done(function (a) {\n      f = arguments, g.html(d ? n(\"<div>\").append(n.parseHTML(a)).find(d) : a);\n    }).complete(c && function (a, b) {\n      g.each(c, f || [a.responseText, b, a]);\n    }), this;\n  }, n.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (a, b) {\n    n.fn[b] = function (a) {\n      return this.on(b, a);\n    };\n  }), n.expr.filters.animated = function (a) {\n    return n.grep(n.timers, function (b) {\n      return a === b.elem;\n    }).length;\n  };\n  var Ib = a.document.documentElement;\n\n  function Jb(a) {\n    return n.isWindow(a) ? a : 9 === a.nodeType && a.defaultView;\n  }\n\n  n.offset = {\n    setOffset: function setOffset(a, b, c) {\n      var d,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k = n.css(a, \"position\"),\n          l = n(a),\n          m = {};\n      \"static\" === k && (a.style.position = \"relative\"), h = l.offset(), f = n.css(a, \"top\"), i = n.css(a, \"left\"), j = (\"absolute\" === k || \"fixed\" === k) && (f + i).indexOf(\"auto\") > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), n.isFunction(b) && (b = b.call(a, c, h)), null != b.top && (m.top = b.top - h.top + g), null != b.left && (m.left = b.left - h.left + e), \"using\" in b ? b.using.call(a, m) : l.css(m);\n    }\n  }, n.fn.extend({\n    offset: function offset(a) {\n      if (arguments.length) return void 0 === a ? this : this.each(function (b) {\n        n.offset.setOffset(this, a, b);\n      });\n      var b,\n          c,\n          d = this[0],\n          e = {\n        top: 0,\n        left: 0\n      },\n          f = d && d.ownerDocument;\n      if (f) return b = f.documentElement, n.contains(b, d) ? (_typeof(d.getBoundingClientRect) !== U && (e = d.getBoundingClientRect()), c = Jb(f), {\n        top: e.top + c.pageYOffset - b.clientTop,\n        left: e.left + c.pageXOffset - b.clientLeft\n      }) : e;\n    },\n    position: function position() {\n      if (this[0]) {\n        var a,\n            b,\n            c = this[0],\n            d = {\n          top: 0,\n          left: 0\n        };\n        return \"fixed\" === n.css(c, \"position\") ? b = c.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), n.nodeName(a[0], \"html\") || (d = a.offset()), d.top += n.css(a[0], \"borderTopWidth\", !0), d.left += n.css(a[0], \"borderLeftWidth\", !0)), {\n          top: b.top - d.top - n.css(c, \"marginTop\", !0),\n          left: b.left - d.left - n.css(c, \"marginLeft\", !0)\n        };\n      }\n    },\n    offsetParent: function offsetParent() {\n      return this.map(function () {\n        var a = this.offsetParent || Ib;\n\n        while (a && !n.nodeName(a, \"html\") && \"static\" === n.css(a, \"position\")) {\n          a = a.offsetParent;\n        }\n\n        return a || Ib;\n      });\n    }\n  }), n.each({\n    scrollLeft: \"pageXOffset\",\n    scrollTop: \"pageYOffset\"\n  }, function (b, c) {\n    var d = \"pageYOffset\" === c;\n\n    n.fn[b] = function (e) {\n      return J(this, function (b, e, f) {\n        var g = Jb(b);\n        return void 0 === f ? g ? g[c] : b[e] : void (g ? g.scrollTo(d ? a.pageXOffset : f, d ? f : a.pageYOffset) : b[e] = f);\n      }, b, e, arguments.length, null);\n    };\n  }), n.each([\"top\", \"left\"], function (a, b) {\n    n.cssHooks[b] = ya(k.pixelPosition, function (a, c) {\n      return c ? (c = xa(a, b), va.test(c) ? n(a).position()[b] + \"px\" : c) : void 0;\n    });\n  }), n.each({\n    Height: \"height\",\n    Width: \"width\"\n  }, function (a, b) {\n    n.each({\n      padding: \"inner\" + a,\n      content: b,\n      \"\": \"outer\" + a\n    }, function (c, d) {\n      n.fn[d] = function (d, e) {\n        var f = arguments.length && (c || \"boolean\" != typeof d),\n            g = c || (d === !0 || e === !0 ? \"margin\" : \"border\");\n        return J(this, function (b, c, d) {\n          var e;\n          return n.isWindow(b) ? b.document.documentElement[\"client\" + a] : 9 === b.nodeType ? (e = b.documentElement, Math.max(b.body[\"scroll\" + a], e[\"scroll\" + a], b.body[\"offset\" + a], e[\"offset\" + a], e[\"client\" + a])) : void 0 === d ? n.css(b, c, g) : n.style(b, c, d, g);\n        }, b, f ? d : void 0, f, null);\n      };\n    });\n  }), n.fn.size = function () {\n    return this.length;\n  }, n.fn.andSelf = n.fn.addBack,  true && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return n;\n  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  var Kb = a.jQuery,\n      Lb = a.$;\n  return n.noConflict = function (b) {\n    return a.$ === n && (a.$ = Lb), b && a.jQuery === n && (a.jQuery = Kb), n;\n  }, _typeof(b) === U && (a.jQuery = a.$ = n), n;\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/template/jquery-min.js\n");

/***/ }),

/***/ "./resources/js/template/jquery.slicknav.js":
/*!**************************************************!*\
  !*** ./resources/js/template/jquery.slicknav.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * SlickNav Responsive Mobile Menu v1.0.4\n * (c) 2015 Josh Cope\n * licensed under MIT\n */\n;\n\n(function ($, document, window) {\n  var // default settings object.\n  defaults = {\n    label: 'MENU',\n    duplicate: true,\n    duration: 200,\n    easingOpen: 'swing',\n    easingClose: 'swing',\n    closedSymbol: '&#9658;',\n    openedSymbol: '&#9660;',\n    prependTo: 'body',\n    parentTag: 'a',\n    closeOnClick: false,\n    allowParentLinks: false,\n    nestedParentLinks: true,\n    showChildren: false,\n    removeIds: false,\n    removeClasses: false,\n    brand: '',\n    init: function init() {},\n    beforeOpen: function beforeOpen() {},\n    beforeClose: function beforeClose() {},\n    afterOpen: function afterOpen() {},\n    afterClose: function afterClose() {}\n  },\n      mobileMenu = 'slicknav',\n      prefix = 'slicknav';\n\n  function Plugin(element, options) {\n    this.element = element; // jQuery has an extend method which merges the contents of two or\n    // more objects, storing the result in the first object. The first object\n    // is generally empty as we don't want to alter the default options for\n    // future instances of the plugin\n\n    this.settings = $.extend({}, defaults, options);\n    this._defaults = defaults;\n    this._name = mobileMenu;\n    this.init();\n  }\n\n  Plugin.prototype.init = function () {\n    var $this = this,\n        menu = $(this.element),\n        settings = this.settings,\n        iconClass,\n        menuBar; // clone menu if needed\n\n    if (settings.duplicate) {\n      $this.mobileNav = menu.clone(); //remove ids from clone to prevent css issues\n\n      $this.mobileNav.removeAttr('id');\n      $this.mobileNav.find('*').each(function (i, e) {\n        $(e).removeAttr('id');\n      });\n    } else {\n      $this.mobileNav = menu; // remove ids if set\n\n      $this.mobileNav.removeAttr('id');\n      $this.mobileNav.find('*').each(function (i, e) {\n        $(e).removeAttr('id');\n      });\n    } // remove classes if set\n\n\n    if (settings.removeClasses) {\n      $this.mobileNav.removeAttr('class');\n      $this.mobileNav.find('*').each(function (i, e) {\n        $(e).removeAttr('class');\n      });\n    } // styling class for the button\n\n\n    iconClass = prefix + '_icon';\n\n    if (settings.label === '') {\n      iconClass += ' ' + prefix + '_no-text';\n    }\n\n    if (settings.parentTag == 'a') {\n      settings.parentTag = 'a href=\"#\"';\n    } // create menu bar\n\n\n    $this.mobileNav.attr('class', prefix + '_nav');\n    menuBar = $('<div class=\"' + prefix + '_menu\"></div>');\n\n    if (settings.brand !== '') {\n      var brand = $('<div class=\"' + prefix + '_brand\">' + settings.brand + '</div>');\n      $(menuBar).append(brand);\n    }\n\n    $this.btn = $(['<' + settings.parentTag + ' aria-haspopup=\"true\" tabindex=\"0\" class=\"' + prefix + '_btn ' + prefix + '_collapsed\">', '<span class=\"' + prefix + '_menutxt\">' + settings.label + '</span>', '<span class=\"' + iconClass + '\">', '<span class=\"' + prefix + '_icon-bar\"></span>', '<span class=\"' + prefix + '_icon-bar\"></span>', '<span class=\"' + prefix + '_icon-bar\"></span>', '</span>', '</' + settings.parentTag + '>'].join(''));\n    $(menuBar).append($this.btn);\n    $(settings.prependTo).prepend(menuBar);\n    menuBar.append($this.mobileNav); // iterate over structure adding additional structure\n\n    var items = $this.mobileNav.find('li');\n    $(items).each(function () {\n      var item = $(this),\n          data = {};\n      data.children = item.children('ul').attr('role', 'menu');\n      item.data('menu', data); // if a list item has a nested menu\n\n      if (data.children.length > 0) {\n        // select all text before the child menu\n        // check for anchors\n        var a = item.contents(),\n            containsAnchor = false,\n            nodes = [];\n        $(a).each(function () {\n          if (!$(this).is('ul')) {\n            nodes.push(this);\n          } else {\n            return false;\n          }\n\n          if ($(this).is(\"a\")) {\n            containsAnchor = true;\n          }\n        });\n        var wrapElement = $('<' + settings.parentTag + ' role=\"menuitem\" aria-haspopup=\"true\" tabindex=\"-1\" class=\"' + prefix + '_item\"/>'); // wrap item text with tag and add classes unless we are separating parent links\n\n        if (!settings.allowParentLinks || settings.nestedParentLinks || !containsAnchor) {\n          var $wrap = $(nodes).wrapAll(wrapElement).parent();\n          $wrap.addClass(prefix + '_row');\n        } else $(nodes).wrapAll('<span class=\"' + prefix + '_parent-link ' + prefix + '_row\"/>').parent();\n\n        if (!settings.showChildren) {\n          item.addClass(prefix + '_collapsed');\n        } else {\n          item.addClass(prefix + '_open');\n        }\n\n        item.addClass(prefix + '_parent'); // create parent arrow. wrap with link if parent links and separating\n\n        var arrowElement = $('<span class=\"' + prefix + '_arrow\">' + (settings.showChildren ? settings.openedSymbol : settings.closedSymbol) + '</span>');\n        if (settings.allowParentLinks && !settings.nestedParentLinks && containsAnchor) arrowElement = arrowElement.wrap(wrapElement).parent(); //append arrow\n\n        $(nodes).last().after(arrowElement);\n      } else if (item.children().length === 0) {\n        item.addClass(prefix + '_txtnode');\n      } // accessibility for links\n\n\n      item.children('a').attr('role', 'menuitem').click(function (event) {\n        //Ensure that it's not a parent\n        if (settings.closeOnClick && !$(event.target).parent().closest('li').hasClass(prefix + '_parent')) {\n          //Emulate menu close if set\n          $($this.btn).click();\n        }\n      }); //also close on click if parent links are set\n\n      if (settings.closeOnClick && settings.allowParentLinks) {\n        item.children('a').children('a').click(function (event) {\n          //Emulate menu close\n          $($this.btn).click();\n        });\n        item.find('.' + prefix + '_parent-link a:not(.' + prefix + '_item)').click(function (event) {\n          //Emulate menu close\n          $($this.btn).click();\n        });\n      }\n    }); // structure is in place, now hide appropriate items\n\n    $(items).each(function () {\n      var data = $(this).data('menu');\n\n      if (!settings.showChildren) {\n        $this._visibilityToggle(data.children, null, false, null, true);\n      }\n    }); // finally toggle entire menu\n\n    $this._visibilityToggle($this.mobileNav, null, false, 'init', true); // accessibility for menu button\n\n\n    $this.mobileNav.attr('role', 'menu'); // outline prevention when using mouse\n\n    $(document).mousedown(function () {\n      $this._outlines(false);\n    });\n    $(document).keyup(function () {\n      $this._outlines(true);\n    }); // menu button click\n\n    $($this.btn).click(function (e) {\n      e.preventDefault();\n\n      $this._menuToggle();\n    }); // click on menu parent\n\n    $this.mobileNav.on('click', '.' + prefix + '_item', function (e) {\n      e.preventDefault();\n\n      $this._itemClick($(this));\n    }); // check for enter key on menu button and menu parents\n\n    $($this.btn).keydown(function (e) {\n      var ev = e || event;\n\n      if (ev.keyCode == 13) {\n        e.preventDefault();\n\n        $this._menuToggle();\n      }\n    });\n    $this.mobileNav.on('keydown', '.' + prefix + '_item', function (e) {\n      var ev = e || event;\n\n      if (ev.keyCode == 13) {\n        e.preventDefault();\n\n        $this._itemClick($(e.target));\n      }\n    }); // allow links clickable within parent tags if set\n\n    if (settings.allowParentLinks && settings.nestedParentLinks) {\n      $('.' + prefix + '_item a').click(function (e) {\n        e.stopImmediatePropagation();\n      });\n    }\n  }; //toggle menu\n\n\n  Plugin.prototype._menuToggle = function (el) {\n    var $this = this;\n    var btn = $this.btn;\n    var mobileNav = $this.mobileNav;\n\n    if (btn.hasClass(prefix + '_collapsed')) {\n      btn.removeClass(prefix + '_collapsed');\n      btn.addClass(prefix + '_open');\n    } else {\n      btn.removeClass(prefix + '_open');\n      btn.addClass(prefix + '_collapsed');\n    }\n\n    btn.addClass(prefix + '_animating');\n\n    $this._visibilityToggle(mobileNav, btn.parent(), true, btn);\n  }; // toggle clicked items\n\n\n  Plugin.prototype._itemClick = function (el) {\n    var $this = this;\n    var settings = $this.settings;\n    var data = el.data('menu');\n\n    if (!data) {\n      data = {};\n      data.arrow = el.children('.' + prefix + '_arrow');\n      data.ul = el.next('ul');\n      data.parent = el.parent(); //Separated parent link structure\n\n      if (data.parent.hasClass(prefix + '_parent-link')) {\n        data.parent = el.parent().parent();\n        data.ul = el.parent().next('ul');\n      }\n\n      el.data('menu', data);\n    }\n\n    if (data.parent.hasClass(prefix + '_collapsed')) {\n      data.arrow.html(settings.openedSymbol);\n      data.parent.removeClass(prefix + '_collapsed');\n      data.parent.addClass(prefix + '_open');\n      data.parent.addClass(prefix + '_animating');\n\n      $this._visibilityToggle(data.ul, data.parent, true, el);\n    } else {\n      data.arrow.html(settings.closedSymbol);\n      data.parent.addClass(prefix + '_collapsed');\n      data.parent.removeClass(prefix + '_open');\n      data.parent.addClass(prefix + '_animating');\n\n      $this._visibilityToggle(data.ul, data.parent, true, el);\n    }\n  }; // toggle actual visibility and accessibility tags\n\n\n  Plugin.prototype._visibilityToggle = function (el, parent, animate, trigger, init) {\n    var $this = this;\n    var settings = $this.settings;\n\n    var items = $this._getActionItems(el);\n\n    var duration = 0;\n\n    if (animate) {\n      duration = settings.duration;\n    }\n\n    if (el.hasClass(prefix + '_hidden')) {\n      el.removeClass(prefix + '_hidden'); //Fire beforeOpen callback\n\n      if (!init) {\n        settings.beforeOpen(trigger);\n      }\n\n      el.slideDown(duration, settings.easingOpen, function () {\n        $(trigger).removeClass(prefix + '_animating');\n        $(parent).removeClass(prefix + '_animating'); //Fire afterOpen callback\n\n        if (!init) {\n          settings.afterOpen(trigger);\n        }\n      });\n      el.attr('aria-hidden', 'false');\n      items.attr('tabindex', '0');\n\n      $this._setVisAttr(el, false);\n    } else {\n      el.addClass(prefix + '_hidden'); //Fire init or beforeClose callback\n\n      if (!init) {\n        settings.beforeClose(trigger);\n      }\n\n      el.slideUp(duration, this.settings.easingClose, function () {\n        el.attr('aria-hidden', 'true');\n        items.attr('tabindex', '-1');\n\n        $this._setVisAttr(el, true);\n\n        el.hide(); //jQuery 1.7 bug fix\n\n        $(trigger).removeClass(prefix + '_animating');\n        $(parent).removeClass(prefix + '_animating'); //Fire init or afterClose callback\n\n        if (!init) {\n          settings.afterClose(trigger);\n        } else if (trigger == 'init') {\n          settings.init();\n        }\n      });\n    }\n  }; // set attributes of element and children based on visibility\n\n\n  Plugin.prototype._setVisAttr = function (el, hidden) {\n    var $this = this; // select all parents that aren't hidden\n\n    var nonHidden = el.children('li').children('ul').not('.' + prefix + '_hidden'); // iterate over all items setting appropriate tags\n\n    if (!hidden) {\n      nonHidden.each(function () {\n        var ul = $(this);\n        ul.attr('aria-hidden', 'false');\n\n        var items = $this._getActionItems(ul);\n\n        items.attr('tabindex', '0');\n\n        $this._setVisAttr(ul, hidden);\n      });\n    } else {\n      nonHidden.each(function () {\n        var ul = $(this);\n        ul.attr('aria-hidden', 'true');\n\n        var items = $this._getActionItems(ul);\n\n        items.attr('tabindex', '-1');\n\n        $this._setVisAttr(ul, hidden);\n      });\n    }\n  }; // get all 1st level items that are clickable\n\n\n  Plugin.prototype._getActionItems = function (el) {\n    var data = el.data(\"menu\");\n\n    if (!data) {\n      data = {};\n      var items = el.children('li');\n      var anchors = items.find('a');\n      data.links = anchors.add(items.find('.' + prefix + '_item'));\n      el.data('menu', data);\n    }\n\n    return data.links;\n  };\n\n  Plugin.prototype._outlines = function (state) {\n    if (!state) {\n      $('.' + prefix + '_item, .' + prefix + '_btn').css('outline', 'none');\n    } else {\n      $('.' + prefix + '_item, .' + prefix + '_btn').css('outline', '');\n    }\n  };\n\n  Plugin.prototype.toggle = function () {\n    var $this = this;\n\n    $this._menuToggle();\n  };\n\n  Plugin.prototype.open = function () {\n    var $this = this;\n\n    if ($this.btn.hasClass(prefix + '_collapsed')) {\n      $this._menuToggle();\n    }\n  };\n\n  Plugin.prototype.close = function () {\n    var $this = this;\n\n    if ($this.btn.hasClass(prefix + '_open')) {\n      $this._menuToggle();\n    }\n  };\n\n  $.fn[mobileMenu] = function (options) {\n    var args = arguments; // Is the first parameter an object (options), or was omitted, instantiate a new instance\n\n    if (options === undefined || _typeof(options) === 'object') {\n      return this.each(function () {\n        // Only allow the plugin to be instantiated once due to methods\n        if (!$.data(this, 'plugin_' + mobileMenu)) {\n          // if it has no instance, create a new one, pass options to our plugin constructor,\n          // and store the plugin instance in the elements jQuery data object.\n          $.data(this, 'plugin_' + mobileMenu, new Plugin(this, options));\n        }\n      }); // If is a string and doesn't start with an underscore or 'init' function, treat this as a call to a public method.\n    } else if (typeof options === 'string' && options[0] !== '_' && options !== 'init') {\n      // Cache the method call to make it possible to return a value\n      var returns;\n      this.each(function () {\n        var instance = $.data(this, 'plugin_' + mobileMenu); // Tests that there's already a plugin-instance and checks that the requested public method exists\n\n        if (instance instanceof Plugin && typeof instance[options] === 'function') {\n          // Call the method of our plugin instance, and pass it the supplied arguments.\n          returns = instance[options].apply(instance, Array.prototype.slice.call(args, 1));\n        }\n      }); // If the earlier cached method gives a value back return the value, otherwise return this to preserve chainability.\n\n      return returns !== undefined ? returns : this;\n    }\n  };\n})(jQuery, document, window);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/template/jquery.slicknav.js\n");

/***/ }),

/***/ "./resources/js/template/main.js":
/*!***************************************!*\
  !*** ./resources/js/template/main.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function ($) {\n  \"use strict\";\n\n  $(window).on('load', function () {\n    // Material\n    $.material.init(); // Sticky Nav\n\n    $(window).on('scroll', function () {\n      if ($(window).scrollTop() > 200) {\n        $('.scrolling-navbar').addClass('top-nav-collapse');\n      } else {\n        $('.scrolling-navbar').removeClass('top-nav-collapse');\n      }\n    }); //WOW Scroll Spy\n\n    var wow = new WOW({\n      //disabled for mobile\n      mobile: false\n    });\n    wow.init(); // Slick Nav\n\n    $('.wpb-mobile-menu').slicknav({\n      prependTo: '.navbar-header',\n      parentTag: 'span',\n      allowParentLinks: true,\n      duplicate: false,\n      label: '',\n      closedSymbol: '<i class=\"mdi mdi-chevron-right\"></i>',\n      openedSymbol: '<i class=\"mdi mdi-chevron-down\"></i>'\n    });\n  });\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvdGVtcGxhdGUvbWFpbi5qcz8xMzBhIl0sIm5hbWVzIjpbIiQiLCJ3aW5kb3ciLCJvbiIsIm1hdGVyaWFsIiwiaW5pdCIsInNjcm9sbFRvcCIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ3b3ciLCJXT1ciLCJtb2JpbGUiLCJzbGlja25hdiIsInByZXBlbmRUbyIsInBhcmVudFRhZyIsImFsbG93UGFyZW50TGlua3MiLCJkdXBsaWNhdGUiLCJsYWJlbCIsImNsb3NlZFN5bWJvbCIsIm9wZW5lZFN5bWJvbCIsImpRdWVyeSJdLCJtYXBwaW5ncyI6IkFBQUMsV0FBU0EsQ0FBVCxFQUFZO0FBQ1g7O0FBRUFBLEdBQUMsQ0FBQ0MsTUFBRCxDQUFELENBQVVDLEVBQVYsQ0FBYSxNQUFiLEVBQXFCLFlBQVc7QUFDNUI7QUFDQUYsS0FBQyxDQUFDRyxRQUFGLENBQVdDLElBQVgsR0FGNEIsQ0FJNUI7O0FBQ0FKLEtBQUMsQ0FBQ0MsTUFBRCxDQUFELENBQVVDLEVBQVYsQ0FBYSxRQUFiLEVBQXVCLFlBQVk7QUFDL0IsVUFBSUYsQ0FBQyxDQUFDQyxNQUFELENBQUQsQ0FBVUksU0FBVixLQUF3QixHQUE1QixFQUFpQztBQUM3QkwsU0FBQyxDQUFDLG1CQUFELENBQUQsQ0FBdUJNLFFBQXZCLENBQWdDLGtCQUFoQztBQUNILE9BRkQsTUFFTztBQUNITixTQUFDLENBQUMsbUJBQUQsQ0FBRCxDQUF1Qk8sV0FBdkIsQ0FBbUMsa0JBQW5DO0FBQ0g7QUFDSixLQU5ELEVBTDRCLENBYTVCOztBQUNBLFFBQUlDLEdBQUcsR0FBRyxJQUFJQyxHQUFKLENBQVE7QUFDZDtBQUNBQyxZQUFNLEVBQUU7QUFGTSxLQUFSLENBQVY7QUFJQUYsT0FBRyxDQUFDSixJQUFKLEdBbEI0QixDQW9CNUI7O0FBQ0FKLEtBQUMsQ0FBQyxrQkFBRCxDQUFELENBQXNCVyxRQUF0QixDQUErQjtBQUMzQkMsZUFBUyxFQUFFLGdCQURnQjtBQUUzQkMsZUFBUyxFQUFFLE1BRmdCO0FBRzNCQyxzQkFBZ0IsRUFBRSxJQUhTO0FBSTNCQyxlQUFTLEVBQUUsS0FKZ0I7QUFLM0JDLFdBQUssRUFBRSxFQUxvQjtBQU0zQkMsa0JBQVksRUFBRSx1Q0FOYTtBQU8zQkMsa0JBQVksRUFBRTtBQVBhLEtBQS9CO0FBVUgsR0EvQkQ7QUFnQ0QsQ0FuQ0EsRUFtQ0NDLE1BbkNELENBQUQiLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvdGVtcGxhdGUvbWFpbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigkKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgLy8gTWF0ZXJpYWxcbiAgICAgICQubWF0ZXJpYWwuaW5pdCgpO1xuXG4gICAgICAvLyBTdGlja3kgTmF2XG4gICAgICAkKHdpbmRvdykub24oJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoJCh3aW5kb3cpLnNjcm9sbFRvcCgpID4gMjAwKSB7XG4gICAgICAgICAgICAgICQoJy5zY3JvbGxpbmctbmF2YmFyJykuYWRkQ2xhc3MoJ3RvcC1uYXYtY29sbGFwc2UnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAkKCcuc2Nyb2xsaW5nLW5hdmJhcicpLnJlbW92ZUNsYXNzKCd0b3AtbmF2LWNvbGxhcHNlJyk7XG4gICAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vV09XIFNjcm9sbCBTcHlcbiAgICAgIHZhciB3b3cgPSBuZXcgV09XKHtcbiAgICAgICAgICAvL2Rpc2FibGVkIGZvciBtb2JpbGVcbiAgICAgICAgICBtb2JpbGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHdvdy5pbml0KCk7XG5cbiAgICAgIC8vIFNsaWNrIE5hdlxuICAgICAgJCgnLndwYi1tb2JpbGUtbWVudScpLnNsaWNrbmF2KHtcbiAgICAgICAgICBwcmVwZW5kVG86ICcubmF2YmFyLWhlYWRlcicsXG4gICAgICAgICAgcGFyZW50VGFnOiAnc3BhbicsXG4gICAgICAgICAgYWxsb3dQYXJlbnRMaW5rczogdHJ1ZSxcbiAgICAgICAgICBkdXBsaWNhdGU6IGZhbHNlLFxuICAgICAgICAgIGxhYmVsOiAnJyxcbiAgICAgICAgICBjbG9zZWRTeW1ib2w6ICc8aSBjbGFzcz1cIm1kaSBtZGktY2hldnJvbi1yaWdodFwiPjwvaT4nLFxuICAgICAgICAgIG9wZW5lZFN5bWJvbDogJzxpIGNsYXNzPVwibWRpIG1kaS1jaGV2cm9uLWRvd25cIj48L2k+JyxcbiAgICAgIH0pO1xuXG4gIH0pO1xufShqUXVlcnkpKTtcblxuXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/template/main.js\n");

/***/ }),

/***/ "./resources/js/template/material.min.js":
/*!***********************************************!*\
  !*** ./resources/js/template/material.min.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("!function (a) {\n  function b(a) {\n    return \"undefined\" == typeof a.which ? !0 : \"number\" == typeof a.which && a.which > 0 ? !a.ctrlKey && !a.metaKey && !a.altKey && 8 != a.which && 9 != a.which && 13 != a.which && 16 != a.which && 17 != a.which && 20 != a.which && 27 != a.which : !1;\n  }\n\n  function c(b) {\n    var c = a(b);\n    c.prop(\"disabled\") || c.closest(\".form-group\").addClass(\"is-focused\");\n  }\n\n  function d(a, b) {\n    var c;\n    return c = a.hasClass(\"checkbox-inline\") || a.hasClass(\"radio-inline\") ? a : a.closest(\".checkbox\").length ? a.closest(\".checkbox\") : a.closest(\".radio\"), c.toggleClass(\"disabled\", b);\n  }\n\n  function e(b) {\n    var e = !1;\n    (b.is(a.material.options.checkboxElements) || b.is(a.material.options.radioElements)) && (e = !0), b.closest(\"label\").hover(function () {\n      var b = a(this).find(\"input\"),\n          f = b.prop(\"disabled\");\n      e && d(a(this), f), f || c(b);\n    }, function () {\n      f(a(this).find(\"input\"));\n    });\n  }\n\n  function f(b) {\n    a(b).closest(\".form-group\").removeClass(\"is-focused\");\n  }\n\n  a.expr[\":\"].notmdproc = function (b) {\n    return a(b).data(\"mdproc\") ? !1 : !0;\n  }, a.material = {\n    options: {\n      validate: !0,\n      input: !0,\n      ripples: !0,\n      checkbox: !0,\n      togglebutton: !0,\n      radio: !0,\n      arrive: !0,\n      autofill: !1,\n      withRipples: [\".btn:not(.btn-link)\", \".card-image\", \".navbar a:not(.withoutripple)\", \".dropdown-menu a\", \".nav-tabs a:not(.withoutripple)\", \".withripple\", \".pagination li:not(.active):not(.disabled) a:not(.withoutripple)\"].join(\",\"),\n      inputElements: \"input.form-control, textarea.form-control, select.form-control\",\n      checkboxElements: \".checkbox > label > input[type=checkbox], label.checkbox-inline > input[type=checkbox]\",\n      togglebuttonElements: \".togglebutton > label > input[type=checkbox]\",\n      radioElements: \".radio > label > input[type=radio], label.radio-inline > input[type=radio]\"\n    },\n    checkbox: function checkbox(b) {\n      var c = a(b ? b : this.options.checkboxElements).filter(\":notmdproc\").data(\"mdproc\", !0).after(\"<span class='checkbox-material'><span class='check'></span></span>\");\n      e(c);\n    },\n    togglebutton: function togglebutton(b) {\n      var c = a(b ? b : this.options.togglebuttonElements).filter(\":notmdproc\").data(\"mdproc\", !0).after(\"<span class='toggle'></span>\");\n      e(c);\n    },\n    radio: function radio(b) {\n      var c = a(b ? b : this.options.radioElements).filter(\":notmdproc\").data(\"mdproc\", !0).after(\"<span class='circle'></span><span class='check'></span>\");\n      e(c);\n    },\n    input: function input(b) {\n      a(b ? b : this.options.inputElements).filter(\":notmdproc\").data(\"mdproc\", !0).each(function () {\n        var b = a(this),\n            c = b.closest(\".form-group\");\n        0 !== c.length || \"hidden\" === b.attr(\"type\") || b.attr(\"hidden\") || (b.wrap(\"<div class='form-group'></div>\"), c = b.closest(\".form-group\")), b.attr(\"data-hint\") && (b.after(\"<p class='help-block'>\" + b.attr(\"data-hint\") + \"</p>\"), b.removeAttr(\"data-hint\"));\n        var d = {\n          \"input-lg\": \"form-group-lg\",\n          \"input-sm\": \"form-group-sm\"\n        };\n\n        if (a.each(d, function (a, d) {\n          b.hasClass(a) && (b.removeClass(a), c.addClass(d));\n        }), b.hasClass(\"floating-label\")) {\n          var e = b.attr(\"placeholder\");\n          b.attr(\"placeholder\", null).removeClass(\"floating-label\");\n          var f = b.attr(\"id\"),\n              g = \"\";\n          f && (g = \"for='\" + f + \"'\"), c.addClass(\"label-floating\"), b.after(\"<label \" + g + \"class='control-label'>\" + e + \"</label>\");\n        }\n\n        (null === b.val() || \"undefined\" == b.val() || \"\" === b.val()) && c.addClass(\"is-empty\"), c.find(\"input[type=file]\").length > 0 && c.addClass(\"is-fileinput\");\n      });\n    },\n    attachInputEventHandlers: function attachInputEventHandlers() {\n      var d = this.options.validate;\n      a(document).on(\"keydown paste\", \".form-control\", function (c) {\n        b(c) && a(this).closest(\".form-group\").removeClass(\"is-empty\");\n      }).on(\"keyup change\", \".form-control\", function () {\n        var b = a(this),\n            c = b.closest(\".form-group\"),\n            e = \"undefined\" == typeof b[0].checkValidity || b[0].checkValidity();\n        \"\" === b.val() ? c.addClass(\"is-empty\") : c.removeClass(\"is-empty\"), d && (e ? c.removeClass(\"has-error\") : c.addClass(\"has-error\"));\n      }).on(\"focus\", \".form-control, .form-group.is-fileinput\", function () {\n        c(this);\n      }).on(\"blur\", \".form-control, .form-group.is-fileinput\", function () {\n        f(this);\n      }).on(\"change\", \".form-group input\", function () {\n        var b = a(this);\n\n        if (\"file\" != b.attr(\"type\")) {\n          var c = b.closest(\".form-group\"),\n              d = b.val();\n          d ? c.removeClass(\"is-empty\") : c.addClass(\"is-empty\");\n        }\n      }).on(\"change\", \".form-group.is-fileinput input[type='file']\", function () {\n        var b = a(this),\n            c = b.closest(\".form-group\"),\n            d = \"\";\n        a.each(this.files, function (a, b) {\n          d += b.name + \", \";\n        }), d = d.substring(0, d.length - 2), d ? c.removeClass(\"is-empty\") : c.addClass(\"is-empty\"), c.find(\"input.form-control[readonly]\").val(d);\n      });\n    },\n    ripples: function ripples(b) {\n      a(b ? b : this.options.withRipples).ripples();\n    },\n    autofill: function autofill() {\n      var b = setInterval(function () {\n        a(\"input[type!=checkbox]\").each(function () {\n          var b = a(this);\n          b.val() && b.val() !== b.attr(\"value\") && b.trigger(\"change\");\n        });\n      }, 100);\n      setTimeout(function () {\n        clearInterval(b);\n      }, 1e4);\n    },\n    attachAutofillEventHandlers: function attachAutofillEventHandlers() {\n      var b;\n      a(document).on(\"focus\", \"input\", function () {\n        var c = a(this).parents(\"form\").find(\"input\").not(\"[type=file]\");\n        b = setInterval(function () {\n          c.each(function () {\n            var b = a(this);\n            b.val() !== b.attr(\"value\") && b.trigger(\"change\");\n          });\n        }, 100);\n      }).on(\"blur\", \".form-group input\", function () {\n        clearInterval(b);\n      });\n    },\n    init: function init(b) {\n      this.options = a.extend({}, this.options, b);\n      var c = a(document);\n      a.fn.ripples && this.options.ripples && this.ripples(), this.options.input && (this.input(), this.attachInputEventHandlers()), this.options.checkbox && this.checkbox(), this.options.togglebutton && this.togglebutton(), this.options.radio && this.radio(), this.options.autofill && (this.autofill(), this.attachAutofillEventHandlers()), document.arrive && this.options.arrive && (a.fn.ripples && this.options.ripples && c.arrive(this.options.withRipples, function () {\n        a.material.ripples(a(this));\n      }), this.options.input && c.arrive(this.options.inputElements, function () {\n        a.material.input(a(this));\n      }), this.options.checkbox && c.arrive(this.options.checkboxElements, function () {\n        a.material.checkbox(a(this));\n      }), this.options.radio && c.arrive(this.options.radioElements, function () {\n        a.material.radio(a(this));\n      }), this.options.togglebutton && c.arrive(this.options.togglebuttonElements, function () {\n        a.material.togglebutton(a(this));\n      }));\n    }\n  };\n}(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/template/material.min.js\n");

/***/ }),

/***/ "./resources/js/template/wow.js":
/*!**************************************!*\
  !*** ./resources/js/template/wow.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function () {\n  var Util,\n      __bind = function __bind(fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  };\n\n  Util = function () {\n    function Util() {}\n\n    Util.prototype.extend = function (custom, defaults) {\n      var key, value;\n\n      for (key in custom) {\n        value = custom[key];\n\n        if (value != null) {\n          defaults[key] = value;\n        }\n      }\n\n      return defaults;\n    };\n\n    Util.prototype.isMobile = function (agent) {\n      return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(agent);\n    };\n\n    return Util;\n  }();\n\n  this.WOW = function () {\n    WOW.prototype.defaults = {\n      boxClass: 'wow',\n      animateClass: 'animated',\n      offset: 0,\n      mobile: true\n    };\n\n    function WOW(options) {\n      if (options == null) {\n        options = {};\n      }\n\n      this.scrollCallback = __bind(this.scrollCallback, this);\n      this.scrollHandler = __bind(this.scrollHandler, this);\n      this.start = __bind(this.start, this);\n      this.scrolled = true;\n      this.config = this.util().extend(options, this.defaults);\n    }\n\n    WOW.prototype.init = function () {\n      var _ref;\n\n      this.element = window.document.documentElement;\n      this.boxes = this.element.getElementsByClassName(this.config.boxClass);\n\n      if (this.boxes.length) {\n        if (this.disabled()) {\n          return this.resetStyle();\n        } else {\n          if ((_ref = document.readyState) === \"interactive\" || _ref === \"complete\") {\n            return this.start();\n          } else {\n            return document.addEventListener('DOMContentLoaded', this.start);\n          }\n        }\n      }\n    };\n\n    WOW.prototype.start = function () {\n      var box, _i, _len, _ref;\n\n      _ref = this.boxes;\n\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        box = _ref[_i];\n        this.applyStyle(box, true);\n      }\n\n      window.addEventListener('scroll', this.scrollHandler, false);\n      window.addEventListener('resize', this.scrollHandler, false);\n      return this.interval = setInterval(this.scrollCallback, 50);\n    };\n\n    WOW.prototype.stop = function () {\n      window.removeEventListener('scroll', this.scrollHandler, false);\n      window.removeEventListener('resize', this.scrollHandler, false);\n\n      if (this.interval != null) {\n        return clearInterval(this.interval);\n      }\n    };\n\n    WOW.prototype.show = function (box) {\n      this.applyStyle(box);\n      return box.className = \"\" + box.className + \" \" + this.config.animateClass;\n    };\n\n    WOW.prototype.applyStyle = function (box, hidden) {\n      var delay, duration, iteration;\n      duration = box.getAttribute('data-wow-duration');\n      delay = box.getAttribute('data-wow-delay');\n      iteration = box.getAttribute('data-wow-iteration');\n      return box.setAttribute('style', this.customStyle(hidden, duration, delay, iteration));\n    };\n\n    WOW.prototype.resetStyle = function () {\n      var box, _i, _len, _ref, _results;\n\n      _ref = this.boxes;\n      _results = [];\n\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        box = _ref[_i];\n\n        _results.push(box.setAttribute('style', 'visibility: visible;'));\n      }\n\n      return _results;\n    };\n\n    WOW.prototype.customStyle = function (hidden, duration, delay, iteration) {\n      var style;\n      style = hidden ? \"visibility: hidden; -webkit-animation-name: none; -moz-animation-name: none; animation-name: none;\" : \"visibility: visible;\";\n\n      if (duration) {\n        style += \"-webkit-animation-duration: \" + duration + \"; -moz-animation-duration: \" + duration + \"; animation-duration: \" + duration + \";\";\n      }\n\n      if (delay) {\n        style += \"-webkit-animation-delay: \" + delay + \"; -moz-animation-delay: \" + delay + \"; animation-delay: \" + delay + \";\";\n      }\n\n      if (iteration) {\n        style += \"-webkit-animation-iteration-count: \" + iteration + \"; -moz-animation-iteration-count: \" + iteration + \"; animation-iteration-count: \" + iteration + \";\";\n      }\n\n      return style;\n    };\n\n    WOW.prototype.scrollHandler = function () {\n      return this.scrolled = true;\n    };\n\n    WOW.prototype.scrollCallback = function () {\n      var box;\n\n      if (this.scrolled) {\n        this.scrolled = false;\n\n        this.boxes = function () {\n          var _i, _len, _ref, _results;\n\n          _ref = this.boxes;\n          _results = [];\n\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            box = _ref[_i];\n\n            if (!box) {\n              continue;\n            }\n\n            if (this.isVisible(box)) {\n              this.show(box);\n              continue;\n            }\n\n            _results.push(box);\n          }\n\n          return _results;\n        }.call(this);\n\n        if (!this.boxes.length) {\n          return this.stop();\n        }\n      }\n    };\n\n    WOW.prototype.offsetTop = function (element) {\n      var top;\n      top = element.offsetTop;\n\n      while (element = element.offsetParent) {\n        top += element.offsetTop;\n      }\n\n      return top;\n    };\n\n    WOW.prototype.isVisible = function (box) {\n      var bottom, offset, top, viewBottom, viewTop;\n      offset = box.getAttribute('data-wow-offset') || this.config.offset;\n      viewTop = window.pageYOffset;\n      viewBottom = viewTop + this.element.clientHeight - offset;\n      top = this.offsetTop(box);\n      bottom = top + box.clientHeight;\n      return top <= viewBottom && bottom >= viewTop;\n    };\n\n    WOW.prototype.util = function () {\n      return this._util || (this._util = new Util());\n    };\n\n    WOW.prototype.disabled = function () {\n      return this.config.mobile === false && this.util().isMobile(navigator.userAgent);\n    };\n\n    return WOW;\n  }();\n}).call(this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/template/wow.js\n");

/***/ }),

/***/ 1:
/*!*******************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** multi ./resources/js/template/jquery-min.js ./resources/js/template/material.min.js ./resources/js/template/form-validator.min.js ./resources/js/template/form-handler.js ./resources/js/template/wow.js ./resources/js/template/jquery.slicknav.js ./resources/js/template/main.js ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! C:\Users\Zoya\Homestead\code\laravel\resources\js\template\jquery-min.js */"./resources/js/template/jquery-min.js");
__webpack_require__(/*! C:\Users\Zoya\Homestead\code\laravel\resources\js\template\material.min.js */"./resources/js/template/material.min.js");
__webpack_require__(/*! C:\Users\Zoya\Homestead\code\laravel\resources\js\template\form-validator.min.js */"./resources/js/template/form-validator.min.js");
__webpack_require__(/*! C:\Users\Zoya\Homestead\code\laravel\resources\js\template\form-handler.js */"./resources/js/template/form-handler.js");
__webpack_require__(/*! C:\Users\Zoya\Homestead\code\laravel\resources\js\template\wow.js */"./resources/js/template/wow.js");
__webpack_require__(/*! C:\Users\Zoya\Homestead\code\laravel\resources\js\template\jquery.slicknav.js */"./resources/js/template/jquery.slicknav.js");
module.exports = __webpack_require__(/*! C:\Users\Zoya\Homestead\code\laravel\resources\js\template\main.js */"./resources/js/template/main.js");


/***/ })

/******/ });